/* @{ */
static std::vector<std::array<std::string,2> > perlfunc = {
{ "abs", "abs VALUE\nabs     Returns the absolute value of its argument. If VALUE is omitted,\nuses $_.\n\n" }, \
{ "accept", "accept NEWSOCKET,GENERICSOCKET\nAccepts an incoming socket connect, just as accept(2) does.\nReturns the packed address if it succeeded, false otherwise. See\nthe example in \"Sockets: Client/Server Communication\" in\nperlipc.\n\n" }, \
{ "alarm", "alarm SECONDS\nalarm   Arranges to have a SIGALRM delivered to this process after the\nspecified number of wallclock seconds has elapsed. If SECONDS is\nnot specified, the value stored in $_ is used. (On some\nmachines, unfortunately, the elapsed time may be up to one\nsecond less or more than you specified because of how seconds\nare counted, and process scheduling may delay the delivery of\nthe signal even further.)\n\n" }, \
{ "and", "and\ncmp\neq\nge\ngt\nle\nlt\nne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "atan2", "atan2 Y,X\nReturns the arctangent of Y/X in the range -PI to PI.\n\n" }, \
{ "AUTOLOAD", "AUTOLOAD\nThis keyword is documented in \"Autoloading\" in perlsub.\n\n" }, \
{ "BEGIN", "BEGIN\nCHECK\nEND\nINIT\nUNITCHECK\nThese compile phase keywords are documented in \"BEGIN,\nUNITCHECK, CHECK, INIT and END\" in perlmod.\n\n" }, \
{ "bind", "bind SOCKET,NAME\nBinds a network address to a socket, just as bind(2) does.\nReturns true if it succeeded, false otherwise. NAME should be a\npacked address of the appropriate type for the socket. See the\nexamples in \"Sockets: Client/Server Communication\" in perlipc.\n\n" }, \
{ "binmode", "binmode FILEHANDLE, LAYER\nbinmode FILEHANDLE\nArranges for FILEHANDLE to be read or written in \"binary\" or\n\"text\" mode on systems where the run-time libraries distinguish\nbetween binary and text files. If FILEHANDLE is an expression,\nthe value is taken as the name of the filehandle. Returns true\non success, otherwise it returns \"undef\" and sets $! (errno).\n\n" }, \
{ "bless", "bless REF,CLASSNAME\nbless REF\nThis function tells the thingy referenced by REF that it is now\nan object in the CLASSNAME package. If CLASSNAME is an empty\nstring, it is interpreted as referring to the \"main\" package. If\nCLASSNAME is omitted, the current package is used. Because a\n\"bless\" is often the last thing in a constructor, it returns the\nreference for convenience. Always use the two-argument version\nif a derived class might inherit the method doing the blessing.\nSee perlobj for more about the blessing (and blessings) of\nobjects.\n\n" }, \
{ "break", "break   Break out of a \"given\" block.\n\n" }, \
{ "caller", "caller EXPR\ncaller  Returns the context of the current pure perl subroutine call. In\nscalar context, returns the caller's package name if there *is*\na caller (that is, if we're in a subroutine or \"eval\" or\n\"require\") and the undefined value otherwise. caller never\nreturns XS subs and they are skipped. The next pure perl sub\nwill appear instead of the XS sub in caller's return values. In\nlist context, caller returns\n\n" }, \
{ "chdir", "chdir EXPR\nchdir FILEHANDLE\nchdir DIRHANDLE\nchdir   Changes the working directory to EXPR, if possible. If EXPR is\nomitted, changes to the directory specified by $ENV{HOME}, if\nset; if not, changes to the directory specified by $ENV{LOGDIR}.\n(Under VMS, the variable $ENV{'SYS$LOGIN'} is also checked, and\nused if it is set.) If neither is set, \"chdir\" does nothing and\nfails. It returns true on success, false otherwise. See the\nexample under \"die\".\n\n" }, \
{ "CHECK", "CHECK\nEND\nINIT\nUNITCHECK\nThese compile phase keywords are documented in \"BEGIN,\nUNITCHECK, CHECK, INIT and END\" in perlmod.\n\n" }, \
{ "chmod", "chmod LIST\nChanges the permissions of a list of files. The first element of\nthe list must be the numeric mode, which should probably be an\noctal number, and which definitely should *not* be a string of\noctal digits: 0644 is okay, but \"0644\" is not. Returns the\nnumber of files successfully changed. See also \"oct\" if all you\nhave is a string.\n\n" }, \
{ "chomp", "chomp VARIABLE\nchomp( LIST )\nchomp   This safer version of \"chop\" removes any trailing string that\ncorresponds to the current value of $/ (also known as\n$INPUT_RECORD_SEPARATOR in the \"English\" module). It returns the\ntotal number of characters removed from all its arguments. It's\noften used to remove the newline from the end of an input record\nwhen you're worried that the final record may be missing its\nnewline. When in paragraph mode (\"$/ = ''\"), it removes all\ntrailing newlines from the string. When in slurp mode (\"$/ =\nundef\") or fixed-length record mode ($/ is a reference to an\ninteger or the like; see perlvar), \"chomp\" won't remove\nanything. If VARIABLE is omitted, it chomps $_. Example:\n\n" }, \
{ "chop", "chop VARIABLE\nchop( LIST )\nchop    Chops off the last character of a string and returns the\ncharacter chopped. It is much more efficient than \"s/.$//s\"\nbecause it neither scans nor copies the string. If VARIABLE is\nomitted, chops $_. If VARIABLE is a hash, it chops the hash's\nvalues, but not its keys, resetting the \"each\" iterator in the\nprocess.\n\n" }, \
{ "chown", "chown LIST\nChanges the owner (and group) of a list of files. The first two\nelements of the list must be the *numeric* uid and gid, in that\norder. A value of -1 in either position is interpreted by most\nsystems to leave that value unchanged. Returns the number of\nfiles successfully changed.\n\n" }, \
{ "chr", "chr NUMBER\nchr     Returns the character represented by that NUMBER in the\ncharacter set. For example, \"chr(65)\" is \"A\" in either ASCII or\nUnicode, and chr(0x263a) is a Unicode smiley face.\n\n" }, \
{ "chroot", "chroot FILENAME\nchroot  This function works like the system call by the same name: it\nmakes the named directory the new root directory for all further\npathnames that begin with a \"/\" by your process and all its\nchildren. (It doesn't change your current working directory,\nwhich is unaffected.) For security reasons, this call is\nrestricted to the superuser. If FILENAME is omitted, does a\n\"chroot\" to $_.\n\n" }, \
{ "close", "close FILEHANDLE\nclose   Closes the file or pipe associated with the filehandle, flushes\nthe IO buffers, and closes the system file descriptor. Returns\ntrue if those operations succeed and if no error was reported by\nany PerlIO layer. Closes the currently selected filehandle if\nthe argument is omitted.\n\n" }, \
{ "closedir", "closedir DIRHANDLE\nCloses a directory opened by \"opendir\" and returns the success\nof that system call.\n\n" }, \
{ "cmp", "cmp\neq\nge\ngt\nle\nlt\nne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "connect", "connect SOCKET,NAME\nAttempts to connect to a remote socket, just like connect(2).\nReturns true if it succeeded, false otherwise. NAME should be a\npacked address of the appropriate type for the socket. See the\nexamples in \"Sockets: Client/Server Communication\" in perlipc.\n\n" }, \
{ "continue", "continue BLOCK\ncontinue\nWhen followed by a BLOCK, \"continue\" is actually a flow control\nstatement rather than a function. If there is a \"continue\" BLOCK\nattached to a BLOCK (typically in a \"while\" or \"foreach\"), it is\nalways executed just before the conditional is about to be\nevaluated again, just like the third part of a \"for\" loop in C.\nThus it can be used to increment a loop variable, even when the\nloop has been continued via the \"next\" statement (which is\nsimilar to the C \"continue\" statement).\n\n" }, \
{ "cos", "cos EXPR\ncos     Returns the cosine of EXPR (expressed in radians). If EXPR is\nomitted, takes the cosine of $_.\n\n" }, \
{ "crypt", "crypt PLAINTEXT,SALT\nCreates a digest string exactly like the crypt(3) function in\nthe C library (assuming that you actually have a version there\nthat has not been extirpated as a potential munition).\n\n" }, \
{ "__DATA__", "__DATA__\n__END__ These keywords are documented in \"Special Literals\" in perldata.\n\n" }, \
{ "dbmclose", "dbmclose HASH\n[This function has been largely superseded by the \"untie\"\nfunction.]\n\n" }, \
{ "dbmopen", "dbmopen HASH,DBNAME,MASK\n[This function has been largely superseded by the \"tie\"\nfunction.]\n\n" }, \
{ "default", "default\ngiven\nwhen    These flow-control keywords related to the experimental switch\nfeature are documented in \"Switch Statements\" in perlsyn.\n\n" }, \
{ "defined", "defined EXPR\ndefined Returns a Boolean value telling whether EXPR has a value other\nthan the undefined value \"undef\". If EXPR is not present, $_ is\nchecked.\n\n" }, \
{ "delete", "delete EXPR\nGiven an expression that specifies an element or slice of a\nhash, \"delete\" deletes the specified elements from that hash so\nthat \"exists\" on that element no longer returns true. Setting a\nhash element to the undefined value does not remove its key, but\ndeleting it does; see \"exists\".\n\n" }, \
{ "DESTROY", "DESTROY This method keyword is documented in \"Destructors\" in perlobj.\n\n" }, \
{ "die", "die LIST\n\"die\" raises an exception. Inside an \"eval\" the exception is\nstuffed into $@ and the \"eval\" is terminated with the undefined\nvalue. If the exception is outside of all enclosing \"eval\"s,\nthen the uncaught exception is printed to \"STDERR\" and perl\nexits with an exit code indicating failure. If you need to exit\nthe process with a specific exit code, see \"exit\".\n\n" }, \
{ "do", "do BLOCK\nNot really a function. Returns the value of the last command in\nthe sequence of commands indicated by BLOCK. When modified by\nthe \"while\" or \"until\" loop modifier, executes the BLOCK once\nbefore testing the loop condition. (On other statements the loop\nmodifiers test the conditional first.)\n\n" }, \
{ "dump", "dump LABEL\ndump EXPR\ndump    This function causes an immediate core dump. See also the -u\ncommand-line switch in perlrun, which does the same thing.\nPrimarily this is so that you can use the undump program (not\nsupplied) to turn your core dump into an executable binary after\nhaving initialized all your variables at the beginning of the\nprogram. When the new binary is executed it will begin by\nexecuting a \"goto LABEL\" (with all the restrictions that \"goto\"\nsuffers). Think of it as a goto with an intervening core dump\nand reincarnation. If \"LABEL\" is omitted, restarts the program\nfrom the top. The \"dump EXPR\" form, available starting in Perl\n5.18.0, allows a name to be computed at run time, being\notherwise identical to \"dump LABEL\".\n\n" }, \
{ "each", "each HASH\neach ARRAY\nWhen called on a hash in list context, returns a 2-element list\nconsisting of the key and value for the next element of a hash.\nIn Perl 5.12 and later only, it will also return the index and\nvalue for the next element of an array so that you can iterate\nover it; older Perls consider this a syntax error. When called\nin scalar context, returns only the key (not the value) in a\nhash, or the index in an array.\n\n" }, \
{ "else", "else\nelsif\nfor\nforeach\nif\nunless\nuntil\nwhile   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "elseif", "elseif  The \"else if\" keyword is spelled \"elsif\" in Perl. There's no\n\"elif\" or \"else if\" either. It does parse \"elseif\", but only to\nwarn you about not using it.\n\n" }, \
{ "elsif", "elsif\nfor\nforeach\nif\nunless\nuntil\nwhile   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "__END__", "__END__ These keywords are documented in \"Special Literals\" in perldata.\n\n" }, \
{ "END", "END\nINIT\nUNITCHECK\nThese compile phase keywords are documented in \"BEGIN,\nUNITCHECK, CHECK, INIT and END\" in perlmod.\n\n" }, \
{ "endgrent", "endgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "endhostent", "endhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "endnetent", "endnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "endprotoent", "endprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "endpwent", "endpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "endservent", "endservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "eof", "eof FILEHANDLE\neof ()\neof     Returns 1 if the next read on FILEHANDLE will return end of file\n*or* if FILEHANDLE is not open. FILEHANDLE may be an expression\nwhose value gives the real filehandle. (Note that this function\nactually reads a character and then \"ungetc\"s it, so isn't\nuseful in an interactive context.) Do not read from a terminal\nfile (or call \"eof(FILEHANDLE)\" on it) after end-of-file is\nreached. File types such as terminals may lose the end-of-file\ncondition if you do.\n\n" }, \
{ "eq", "eq\nge\ngt\nle\nlt\nne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "eval", "eval EXPR\neval BLOCK\neval    \"eval\" in all its forms is used to execute a little Perl\nprogram, trapping any errors encountered so they don't crash the\ncalling program.\n\n" }, \
{ "evalbytes", "evalbytes EXPR\nevalbytes\nThis function is similar to a string eval, except it always\nparses its argument (or $_ if EXPR is omitted) as a string of\nindependent bytes.\n\n" }, \
{ "exec", "exec LIST\nexec PROGRAM LIST\nThe \"exec\" function executes a system command *and never\nreturns*; use \"system\" instead of \"exec\" if you want it to\nreturn. It fails and returns false only if the command does not\nexist *and* it is executed directly instead of via your system's\ncommand shell (see below).\n\n" }, \
{ "exists", "exists EXPR\nGiven an expression that specifies an element of a hash, returns\ntrue if the specified element in the hash has ever been\ninitialized, even if the corresponding value is undefined.\n\n" }, \
{ "exit", "exit EXPR\nexit    Evaluates EXPR and exits immediately with that value. Example:\n\n" }, \
{ "exp", "exp EXPR\nexp     Returns *e* (the natural logarithm base) to the power of EXPR.\nIf EXPR is omitted, gives \"exp($_)\".\n\n" }, \
{ "fc", "fc EXPR\nfc      Returns the casefolded version of EXPR. This is the internal\nfunction implementing the \"\\F\" escape in double-quoted strings.\n\n" }, \
{ "fcntl", "fcntl FILEHANDLE,FUNCTION,SCALAR\nImplements the fcntl(2) function. You'll probably have to say\n\n" }, \
{ "__FILE__", "__FILE__\nA special token that returns the name of the file in which it\noccurs.\n\n" }, \
{ "fileno", "fileno FILEHANDLE\nfileno DIRHANDLE\nReturns the file descriptor for a filehandle or directory\nhandle, or undefined if the filehandle is not open. If there is\nno real file descriptor at the OS level, as can happen with\nfilehandles connected to memory objects via \"open\" with a\nreference for the third argument, -1 is returned.\n\n" }, \
{ "flock", "flock FILEHANDLE,OPERATION\nCalls flock(2), or an emulation of it, on FILEHANDLE. Returns\ntrue for success, false on failure. Produces a fatal error if\nused on a machine that doesn't implement flock(2), fcntl(2)\nlocking, or lockf(3). \"flock\" is Perl's portable file-locking\ninterface, although it locks entire files only, not records.\n\n" }, \
{ "for", "for\nforeach\nif\nunless\nuntil\nwhile   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "foreach", "foreach\nif\nunless\nuntil\nwhile   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "fork", "fork    Does a fork(2) system call to create a new process running the\nsame program at the same point. It returns the child pid to the\nparent process, 0 to the child process, or \"undef\" if the fork\nis unsuccessful. File descriptors (and sometimes locks on those\ndescriptors) are shared, while everything else is copied. On\nmost systems supporting fork(2), great care has gone into making\nit extremely efficient (for example, using copy-on-write\ntechnology on data pages), making it the dominant paradigm for\nmultitasking over the last few decades.\n\n" }, \
{ "format", "format  Declare a picture format for use by the \"write\" function. For\nexample:\n\n" }, \
{ "formline", "formline PICTURE,LIST\nThis is an internal function used by \"format\"s, though you may\ncall it, too. It formats (see perlform) a list of values\naccording to the contents of PICTURE, placing the output into\nthe format output accumulator, $^A (or $ACCUMULATOR in English).\nEventually, when a \"write\" is done, the contents of $^A are\nwritten to some filehandle. You could also read $^A and then set\n$^A back to \"\". Note that a format typically does one \"formline\"\nper line of form, but the \"formline\" function itself doesn't\ncare how many newlines are embedded in the PICTURE. This means\nthat the \"~\" and \"~~\" tokens treat the entire PICTURE as a\nsingle line. You may therefore need to use multiple formlines to\nimplement a single record format, just like the \"format\"\ncompiler.\n\n" }, \
{ "ge", "ge\ngt\nle\nlt\nne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "getc", "getc FILEHANDLE\ngetc    Returns the next character from the input file attached to\nFILEHANDLE, or the undefined value at end of file or if there\nwas an error (in the latter case $! is set). If FILEHANDLE is\nomitted, reads from STDIN. This is not particularly efficient.\nHowever, it cannot be used by itself to fetch single characters\nwithout waiting for the user to hit enter. For that, try\nsomething more like:\n\n" }, \
{ "getgrent", "getgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getgrgid", "getgrgid GID\ngetservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getgrnam", "getgrnam NAME\ngethostbyname NAME\ngetnetbyname NAME\ngetprotobyname NAME\ngetpwuid UID\ngetgrgid GID\ngetservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "gethostbyaddr", "gethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "gethostbyname", "gethostbyname NAME\ngetnetbyname NAME\ngetprotobyname NAME\ngetpwuid UID\ngetgrgid GID\ngetservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "gethostent", "gethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getlogin", "getlogin\nThis implements the C library function of the same name, which\non most systems returns the current login from /etc/utmp, if\nany. If it returns the empty string, use \"getpwuid\".\n\n" }, \
{ "getnetbyaddr", "getnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getnetbyname", "getnetbyname NAME\ngetprotobyname NAME\ngetpwuid UID\ngetgrgid GID\ngetservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getnetent", "getnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getpeername", "getpeername SOCKET\nReturns the packed sockaddr address of the other end of the\nSOCKET connection.\n\n" }, \
{ "getpgrp", "getpgrp PID\nReturns the current process group for the specified PID. Use a\nPID of 0 to get the current process group for the current\nprocess. Will raise an exception if used on a machine that\ndoesn't implement getpgrp(2). If PID is omitted, returns the\nprocess group of the current process. Note that the POSIX\nversion of \"getpgrp\" does not accept a PID argument, so only\n\"PID==0\" is truly portable.\n\n" }, \
{ "getppid", "getppid Returns the process id of the parent process.\n\n" }, \
{ "getpriority", "getpriority WHICH,WHO\nReturns the current priority for a process, a process group, or\na user. (See getpriority(2).) Will raise a fatal exception if\nused on a machine that doesn't implement getpriority(2).\n\n" }, \
{ "getprotobyname", "getprotobyname NAME\ngetpwuid UID\ngetgrgid GID\ngetservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getprotobynumber", "getprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getprotoent", "getprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getpwent", "getpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getpwnam", "getpwnam NAME\ngetgrnam NAME\ngethostbyname NAME\ngetnetbyname NAME\ngetprotobyname NAME\ngetpwuid UID\ngetgrgid GID\ngetservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getpwuid", "getpwuid UID\ngetgrgid GID\ngetservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getservbyname", "getservbyname NAME,PROTO\ngethostbyaddr ADDR,ADDRTYPE\ngetnetbyaddr ADDR,ADDRTYPE\ngetprotobynumber NUMBER\ngetservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getservbyport", "getservbyport PORT,PROTO\ngetpwent\ngetgrent\ngethostent\ngetnetent\ngetprotoent\ngetservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getservent", "getservent\nsetpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "getsockname", "getsockname SOCKET\nReturns the packed sockaddr address of this end of the SOCKET\nconnection, in case you don't know the address because you have\nseveral different IPs that the connection might have come in on.\n\n" }, \
{ "getsockopt", "getsockopt SOCKET,LEVEL,OPTNAME\nQueries the option named OPTNAME associated with SOCKET at a\ngiven LEVEL. Options may exist at multiple protocol levels\ndepending on the socket type, but at least the uppermost socket\nlevel SOL_SOCKET (defined in the \"Socket\" module) will exist. To\nquery options at another level the protocol number of the\nappropriate protocol controlling the option should be supplied.\nFor example, to indicate that an option is to be interpreted by\nthe TCP protocol, LEVEL should be set to the protocol number of\nTCP, which you can get using \"getprotobyname\".\n\n" }, \
{ "given", "given\nwhen    These flow-control keywords related to the experimental switch\nfeature are documented in \"Switch Statements\" in perlsyn.\n\n" }, \
{ "glob", "glob EXPR\nglob    In list context, returns a (possibly empty) list of filename\nexpansions on the value of EXPR such as the standard Unix shell\n/bin/csh would do. In scalar context, glob iterates through such\nfilename expansions, returning undef when the list is exhausted.\nThis is the internal function implementing the \"<*.c>\" operator,\nbut you can use it directly. If EXPR is omitted, $_ is used. The\n\"<*.c>\" operator is discussed in more detail in \"I/O Operators\"\nin perlop.\n\n" }, \
{ "gmtime", "gmtime EXPR\ngmtime  Works just like \"localtime\" but the returned values are\nlocalized for the standard Greenwich time zone.\n\n" }, \
{ "goto", "goto LABEL\ngoto EXPR\ngoto &NAME\nThe \"goto LABEL\" form finds the statement labeled with LABEL and\nresumes execution there. It can't be used to get out of a block\nor subroutine given to \"sort\". It can be used to go almost\nanywhere else within the dynamic scope, including out of\nsubroutines, but it's usually better to use some other construct\nsuch as \"last\" or \"die\". The author of Perl has never felt the\nneed to use this form of \"goto\" (in Perl, that is; C is another\nmatter). (The difference is that C does not offer named loops\ncombined with loop control. Perl does, and this replaces most\nstructured uses of \"goto\" in other languages.)\n\n" }, \
{ "grep", "grep BLOCK LIST\ngrep EXPR,LIST\nThis is similar in spirit to, but not the same as, grep(1) and\nits relatives. In particular, it is not limited to using regular\nexpressions.\n\n" }, \
{ "gt", "gt\nle\nlt\nne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "hex", "hex EXPR\nhex     Interprets EXPR as a hex string and returns the corresponding\nnumeric value. If EXPR is omitted, uses $_.\n\n" }, \
{ "if", "if\nunless\nuntil\nwhile   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "import", "import LIST\nThere is no builtin \"import\" function. It is just an ordinary\nmethod (subroutine) defined (or inherited) by modules that wish\nto export names to another module. The \"use\" function calls the\n\"import\" method for the package used. See also \"use\", perlmod,\nand Exporter.\n\n" }, \
{ "index", "index STR,SUBSTR,POSITION\nindex STR,SUBSTR\nThe index function searches for one string within another, but\nwithout the wildcard-like behavior of a full regular-expression\npattern match. It returns the position of the first occurrence\nof SUBSTR in STR at or after POSITION. If POSITION is omitted,\nstarts searching from the beginning of the string. POSITION\nbefore the beginning of the string or after its end is treated\nas if it were the beginning or the end, respectively. POSITION\nand the return value are based at zero. If the substring is not\nfound, \"index\" returns -1.\n\n" }, \
{ "INIT", "INIT\nUNITCHECK\nThese compile phase keywords are documented in \"BEGIN,\nUNITCHECK, CHECK, INIT and END\" in perlmod.\n\n" }, \
{ "int", "int EXPR\nint     Returns the integer portion of EXPR. If EXPR is omitted, uses\n$_. You should not use this function for rounding: one because\nit truncates towards 0, and two because machine representations\nof floating-point numbers can sometimes produce counterintuitive\nresults. For example, \"int(-6.725/0.025)\" produces -268 rather\nthan the correct -269; that's because it's really more like\n-268.99999999999994315658 instead. Usually, the \"sprintf\",\n\"printf\", or the \"POSIX::floor\" and \"POSIX::ceil\" functions will\nserve you better than will \"int\".\n\n" }, \
{ "ioctl", "ioctl FILEHANDLE,FUNCTION,SCALAR\nImplements the ioctl(2) function. You'll probably first have to\nsay\n\n" }, \
{ "join", "join EXPR,LIST\nJoins the separate strings of LIST into a single string with\nfields separated by the value of EXPR, and returns that new\nstring. Example:\n\n" }, \
{ "keys", "keys HASH\nkeys ARRAY\nCalled in list context, returns a list consisting of all the\nkeys of the named hash, or in Perl 5.12 or later only, the\nindices of an array. Perl releases prior to 5.12 will produce a\nsyntax error if you try to use an array argument. In scalar\ncontext, returns the number of keys or indices.\n\n" }, \
{ "kill", "kill SIGNAL, LIST\nkill SIGNAL\nSends a signal to a list of processes. Returns the number of\narguments that were successfully used to signal (which is not\nnecessarily the same as the number of processes actually killed,\ne.g. where a process group is killed).\n\n" }, \
{ "last", "last LABEL\nlast EXPR\nlast    The \"last\" command is like the \"break\" statement in C (as used\nin loops); it immediately exits the loop in question. If the\nLABEL is omitted, the command refers to the innermost enclosing\nloop. The \"last EXPR\" form, available starting in Perl 5.18.0,\nallows a label name to be computed at run time, and is otherwise\nidentical to \"last LABEL\". The \"continue\" block, if any, is not\nexecuted:\n\n" }, \
{ "lc", "lc EXPR\nlc      Returns a lowercased version of EXPR. This is the internal\nfunction implementing the \"\\L\" escape in double-quoted strings.\n\n" }, \
{ "lcfirst", "lcfirst EXPR\nlcfirst Returns the value of EXPR with the first character lowercased.\nThis is the internal function implementing the \"\\l\" escape in\ndouble-quoted strings.\n\n" }, \
{ "le", "le\nlt\nne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "length", "length EXPR\nlength  Returns the length in *characters* of the value of EXPR. If EXPR\nis omitted, returns the length of $_. If EXPR is undefined,\nreturns \"undef\".\n\n" }, \
{ "__LINE__", "__LINE__\nA special token that compiles to the current line number.\n\n" }, \
{ "link", "link OLDFILE,NEWFILE\nCreates a new filename linked to the old filename. Returns true\nfor success, false otherwise.\n\n" }, \
{ "listen", "listen SOCKET,QUEUESIZE\nDoes the same thing that the listen(2) system call does. Returns\ntrue if it succeeded, false otherwise. See the example in\n\"Sockets: Client/Server Communication\" in perlipc.\n\n" }, \
{ "local", "local EXPR\nYou really probably want to be using \"my\" instead, because\n\"local\" isn't what most people think of as \"local\". See \"Private\nVariables via my()\" in perlsub for details.\n\n" }, \
{ "localtime", "localtime EXPR\nlocaltime\nConverts a time as returned by the time function to a 9-element\nlist with the time analyzed for the local time zone. Typically\nused as follows:\n\n" }, \
{ "lock", "lock THING\nThis function places an advisory lock on a shared variable or\nreferenced object contained in *THING* until the lock goes out\nof scope.\n\n" }, \
{ "log", "log EXPR\nlog     Returns the natural logarithm (base *e*) of EXPR. If EXPR is\nomitted, returns the log of $_. To get the log of another base,\nuse basic algebra: The base-N log of a number is equal to the\nnatural log of that number divided by the natural log of N. For\nexample:\n\n" }, \
{ "lstat", "lstat FILEHANDLE\nlstat EXPR\nlstat DIRHANDLE\nlstat   Does the same thing as the \"stat\" function (including setting\nthe special \"_\" filehandle) but stats a symbolic link instead of\nthe file the symbolic link points to. If symbolic links are\nunimplemented on your system, a normal \"stat\" is done. For much\nmore detailed information, please see the documentation for\n\"stat\".\n\n" }, \
{ "lt", "lt\nne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "m", "\"m/*PATTERN*/msixpodualngc\"\nSearches a string for a pattern match, and in scalar context\nreturns true if it succeeds, false if it fails. If no string is\nspecified via the \"=~\" or \"!~\" operator, the $_ string is\nsearched. (The string specified with \"=~\" need not be an\nlvalue--it may be the result of an expression evaluation, but\nremember the \"=~\" binds rather tightly.) See also perlre.\n\n" }, \
{ "map", "map BLOCK LIST\nmap EXPR,LIST\nEvaluates the BLOCK or EXPR for each element of LIST (locally\nsetting $_ to each element) and composes a list of the results\nof each such evaluation. Each element of LIST may produce zero,\none, or more elements in the generated list, so the number of\nelements in the generated list may differ from that in LIST. In\nscalar context, returns the total number of elements so\ngenerated. In list context, returns the generated list.\n\n" }, \
{ "mkdir", "mkdir FILENAME,MODE\nmkdir FILENAME\nmkdir   Creates the directory specified by FILENAME, with permissions\nspecified by MODE (as modified by \"umask\"). If it succeeds it\nreturns true; otherwise it returns false and sets $! (errno).\nMODE defaults to 0777 if omitted, and FILENAME defaults to $_ if\nomitted.\n\n" }, \
{ "msgctl", "msgctl ID,CMD,ARG\nCalls the System V IPC function msgctl(2). You'll probably have\nto say\n\n" }, \
{ "msgget", "msgget KEY,FLAGS\nCalls the System V IPC function msgget(2). Returns the message\nqueue id, or \"undef\" on error. See also \"SysV IPC\" in perlipc\nand the documentation for \"IPC::SysV\" and \"IPC::Msg\".\n\n" }, \
{ "msgrcv", "msgrcv ID,VAR,SIZE,TYPE,FLAGS\nCalls the System V IPC function msgrcv to receive a message from\nmessage queue ID into variable VAR with a maximum message size\nof SIZE. Note that when a message is received, the message type\nas a native long integer will be the first thing in VAR,\nfollowed by the actual message. This packing may be opened with\n\"unpack(\"l! a*\")\". Taints the variable. Returns true if\nsuccessful, false on error. See also \"SysV IPC\" in perlipc and\nthe documentation for \"IPC::SysV\" and \"IPC::Msg\".\n\n" }, \
{ "msgsnd", "msgsnd ID,MSG,FLAGS\nCalls the System V IPC function msgsnd to send the message MSG\nto the message queue ID. MSG must begin with the native long\ninteger message type, be followed by the length of the actual\nmessage, and then finally the message itself. This kind of\npacking can be achieved with \"pack(\"l! a*\", $type, $message)\".\nReturns true if successful, false on error. See also \"SysV IPC\"\nin perlipc and the documentation for \"IPC::SysV\" and \"IPC::Msg\".\n\n" }, \
{ "my", "my VARLIST\nmy TYPE VARLIST\nmy VARLIST : ATTRS\nmy TYPE VARLIST : ATTRS\nA \"my\" declares the listed variables to be local (lexically) to\nthe enclosing block, file, or \"eval\". If more than one variable\nis listed, the list must be placed in parentheses.\n\n" }, \
{ "ne", "ne\nnot\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "next", "next LABEL\nnext EXPR\nnext    The \"next\" command is like the \"continue\" statement in C; it\nstarts the next iteration of the loop:\n\n" }, \
{ "no", "no MODULE VERSION LIST\nno MODULE VERSION\nno MODULE LIST\nno MODULE\nno VERSION\nSee the \"use\" function, of which \"no\" is the opposite.\n\n" }, \
{ "not", "not\nor\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "oct", "oct EXPR\noct     Interprets EXPR as an octal string and returns the corresponding\nvalue. (If EXPR happens to start off with \"0x\", interprets it as\na hex string. If EXPR starts off with \"0b\", it is interpreted as\na binary string. Leading whitespace is ignored in all three\ncases.) The following will handle decimal, binary, octal, and\nhex in standard Perl notation:\n\n" }, \
{ "open", "open FILEHANDLE,EXPR\nopen FILEHANDLE,MODE,EXPR\nopen FILEHANDLE,MODE,EXPR,LIST\nopen FILEHANDLE,MODE,REFERENCE\nopen FILEHANDLE\nOpens the file whose filename is given by EXPR, and associates\nit with FILEHANDLE.\n\n" }, \
{ "opendir", "opendir DIRHANDLE,EXPR\nOpens a directory named EXPR for processing by \"readdir\",\n\"telldir\", \"seekdir\", \"rewinddir\", and \"closedir\". Returns true\nif successful. DIRHANDLE may be an expression whose value can be\nused as an indirect dirhandle, usually the real dirhandle name.\nIf DIRHANDLE is an undefined scalar variable (or array or hash\nelement), the variable is assigned a reference to a new\nanonymous dirhandle; that is, it's autovivified. Dirhandles are\nthe same objects as filehandles; an I/O object can only be open\nas one of these handle types at once.\n\n" }, \
{ "or", "or\nx\nxor     These operators are documented in perlop.\n\n" }, \
{ "ord", "ord EXPR\nord     Returns the numeric value of the first character of EXPR. If\nEXPR is an empty string, returns 0. If EXPR is omitted, uses $_.\n(Note *character*, not byte.)\n\n" }, \
{ "our", "our VARLIST\nour TYPE VARLIST\nour VARLIST : ATTRS\nour TYPE VARLIST : ATTRS\n\"our\" makes a lexical alias to a package (i.e. global) variable\nof the same name in the current package for use within the\ncurrent lexical scope.\n\n" }, \
{ "pack", "pack TEMPLATE,LIST\nTakes a LIST of values and converts it into a string using the\nrules given by the TEMPLATE. The resulting string is the\nconcatenation of the converted values. Typically, each converted\nvalue looks like its machine-level representation. For example,\non 32-bit machines an integer may be represented by a sequence\nof 4 bytes, which will in Perl be presented as a string that's 4\ncharacters long.\n\n" }, \
{ "package", "package NAMESPACE\npackage NAMESPACE VERSION\npackage NAMESPACE BLOCK\npackage NAMESPACE VERSION BLOCK\nDeclares the BLOCK or the rest of the compilation unit as being\nin the given namespace. The scope of the package declaration is\neither the supplied code BLOCK or, in the absence of a BLOCK,\nfrom the declaration itself through the end of current scope\n(the enclosing block, file, or \"eval\"). That is, the forms\nwithout a BLOCK are operative through the end of the current\nscope, just like the \"my\", \"state\", and \"our\" operators. All\nunqualified dynamic identifiers in this scope will be in the\ngiven namespace, except where overridden by another \"package\"\ndeclaration or when they're one of the special identifiers that\nqualify into \"main::\", like \"STDOUT\", \"ARGV\", \"ENV\", and the\npunctuation variables.\n\n" }, \
{ "__PACKAGE__", "__PACKAGE__\nA special token that returns the name of the package in which it\noccurs.\n\n" }, \
{ "pipe", "pipe READHANDLE,WRITEHANDLE\nOpens a pair of connected pipes like the corresponding system\ncall. Note that if you set up a loop of piped processes,\ndeadlock can occur unless you are very careful. In addition,\nnote that Perl's pipes use IO buffering, so you may need to set\n$| to flush your WRITEHANDLE after each command, depending on\nthe application.\n\n" }, \
{ "pop", "pop ARRAY\npop     Pops and returns the last value of the array, shortening the\narray by one element.\n\n" }, \
{ "pos", "pos SCALAR\npos     Returns the offset of where the last \"m//g\" search left off for\nthe variable in question ($_ is used when the variable is not\nspecified). This offset is in characters unless the\n(no-longer-recommended) \"use bytes\" pragma is in effect, in\nwhich case the offset is in bytes. Note that 0 is a valid match\noffset. \"undef\" indicates that the search position is reset\n(usually due to match failure, but can also be because no match\nhas yet been run on the scalar).\n\n" }, \
{ "print", "print FILEHANDLE LIST\nprint FILEHANDLE\nprint LIST\nprint   Prints a string or a list of strings. Returns true if\nsuccessful. FILEHANDLE may be a scalar variable containing the\nname of or a reference to the filehandle, thus introducing one\nlevel of indirection. (NOTE: If FILEHANDLE is a variable and the\nnext token is a term, it may be misinterpreted as an operator\nunless you interpose a \"+\" or put parentheses around the\narguments.) If FILEHANDLE is omitted, prints to the last\nselected (see \"select\") output handle. If LIST is omitted,\nprints $_ to the currently selected output handle. To use\nFILEHANDLE alone to print the content of $_ to it, you must use\na bareword filehandle like \"FH\", not an indirect one like $fh.\nTo set the default output handle to something other than STDOUT,\nuse the select operation.\n\n" }, \
{ "printf", "printf FILEHANDLE FORMAT, LIST\nprintf FILEHANDLE\nprintf FORMAT, LIST\nprintf  Equivalent to \"print FILEHANDLE sprintf(FORMAT, LIST)\", except\nthat $\\ (the output record separator) is not appended. The\nFORMAT and the LIST are actually parsed as a single list. The\nfirst argument of the list will be interpreted as the \"printf\"\nformat. This means that \"printf(@_)\" will use $_[0] as the\nformat. See sprintf for an explanation of the format argument.\nIf \"use locale\" (including \"use locale ':not_characters'\") is in\neffect and \"POSIX::setlocale\" has been called, the character\nused for the decimal separator in formatted floating-point\nnumbers is affected by the \"LC_NUMERIC\" locale setting. See\nperllocale and POSIX.\n\n" }, \
{ "prototype", "prototype FUNCTION\nprototype\nReturns the prototype of a function as a string (or \"undef\" if\nthe function has no prototype). FUNCTION is a reference to, or\nthe name of, the function whose prototype you want to retrieve.\nIf FUNCTION is omitted, $_ is used.\n\n" }, \
{ "push", "push ARRAY,LIST\nTreats ARRAY as a stack by appending the values of LIST to the\nend of ARRAY. The length of ARRAY increases by the length of\nLIST. Has the same effect as\n\n" }, \
{ "q", "\"q/*STRING*/\"\nA single-quoted, literal string. A backslash represents a\nbackslash unless followed by the delimiter or another backslash,\nin which case the delimiter or backslash is interpolated.\n\n" }, \
{ "qq", "\"qq/*STRING*/\"\nA double-quoted, interpolated string.\n\n" }, \
{ "qr", "\"qr/*STRING*/msixpodualn\"\nThis operator quotes (and possibly compiles) its *STRING* as a\nregular expression. *STRING* is interpolated the same way as\n*PATTERN* in \"m/*PATTERN*/\". If \"'\" is used as the delimiter, no\nvariable interpolation is done. Returns a Perl value which may\nbe used instead of the corresponding \"/*STRING*/msixpodualn\"\nexpression. The returned value is a normalized version of the\noriginal pattern. It magically differs from a string containing\nthe same characters: \"ref(qr/x/)\" returns \"Regexp\"; however,\ndereferencing it is not well defined (you currently get the\nnormalized version of the original pattern, but this may\nchange).\n\n" }, \
{ "quotemeta", "quotemeta EXPR\nquotemeta\nReturns the value of EXPR with all the ASCII non-\"word\"\ncharacters backslashed. (That is, all ASCII characters not\nmatching \"/[A-Za-z_0-9]/\" will be preceded by a backslash in the\nreturned string, regardless of any locale settings.) This is the\ninternal function implementing the \"\\Q\" escape in double-quoted\nstrings. (See below for the behavior on non-ASCII code points.)\n\n" }, \
{ "qw", "\"qw/*STRING*/\"\nEvaluates to a list of the words extracted out of *STRING*,\nusing embedded whitespace as the word delimiters. It can be\nunderstood as being roughly equivalent to:\n\n" }, \
{ "qx", "\"qx/*STRING*/\"\nA string which is (possibly) interpolated and then executed as a\nsystem command with /bin/sh or its equivalent. Shell wildcards,\npipes, and redirections will be honored. The collected standard\noutput of the command is returned; standard error is unaffected.\nIn scalar context, it comes back as a single (potentially\nmulti-line) string, or \"undef\" if the command failed. In list\ncontext, returns a list of lines (however you've defined lines\nwith $/ or $INPUT_RECORD_SEPARATOR), or an empty list if the\ncommand failed.\n\n" }, \
{ "rand", "rand EXPR\nrand    Returns a random fractional number greater than or equal to 0\nand less than the value of EXPR. (EXPR should be positive.) If\nEXPR is omitted, the value 1 is used. Currently EXPR with the\nvalue 0 is also special-cased as 1 (this was undocumented before\nPerl 5.8.0 and is subject to change in future versions of Perl).\nAutomatically calls \"srand\" unless \"srand\" has already been\ncalled. See also \"srand\".\n\n" }, \
{ "read", "read FILEHANDLE,SCALAR,LENGTH,OFFSET\nread FILEHANDLE,SCALAR,LENGTH\nAttempts to read LENGTH *characters* of data into variable\nSCALAR from the specified FILEHANDLE. Returns the number of\ncharacters actually read, 0 at end of file, or undef if there\nwas an error (in the latter case $! is also set). SCALAR will be\ngrown or shrunk so that the last character actually read is the\nlast character of the scalar after the read.\n\n" }, \
{ "readdir", "readdir DIRHANDLE\nReturns the next directory entry for a directory opened by\n\"opendir\". If used in list context, returns all the rest of the\nentries in the directory. If there are no more entries, returns\nthe undefined value in scalar context and the empty list in list\ncontext.\n\n" }, \
{ "readline", "readline EXPR\nreadline\nReads from the filehandle whose typeglob is contained in EXPR\n(or from *ARGV if EXPR is not provided). In scalar context, each\ncall reads and returns the next line until end-of-file is\nreached, whereupon the subsequent call returns \"undef\". In list\ncontext, reads until end-of-file is reached and returns a list\nof lines. Note that the notion of \"line\" used here is whatever\nyou may have defined with $/ (or $INPUT_RECORD_SEPARATOR in\nEnglish). See \"$/\" in perlvar.\n\n" }, \
{ "readlink", "readlink EXPR\nreadlink\nReturns the value of a symbolic link, if symbolic links are\nimplemented. If not, raises an exception. If there is a system\nerror, returns the undefined value and sets $! (errno). If EXPR\nis omitted, uses $_.\n\n" }, \
{ "readpipe", "readpipe EXPR\nreadpipe\nEXPR is executed as a system command. The collected standard\noutput of the command is returned. In scalar context, it comes\nback as a single (potentially multi-line) string. In list\ncontext, returns a list of lines (however you've defined lines\nwith $/ (or $INPUT_RECORD_SEPARATOR in English)). This is the\ninternal function implementing the \"qx/EXPR/\" operator, but you\ncan use it directly. The \"qx/EXPR/\" operator is discussed in\nmore detail in \"I/O Operators\" in perlop. If EXPR is omitted,\nuses $_.\n\n" }, \
{ "recv", "recv SOCKET,SCALAR,LENGTH,FLAGS\nReceives a message on a socket. Attempts to receive LENGTH\ncharacters of data into variable SCALAR from the specified\nSOCKET filehandle. SCALAR will be grown or shrunk to the length\nactually read. Takes the same flags as the system call of the\nsame name. Returns the address of the sender if SOCKET's\nprotocol supports this; returns an empty string otherwise. If\nthere's an error, returns the undefined value. This call is\nactually implemented in terms of the recvfrom(2) system call.\nSee \"UDP: Message Passing\" in perlipc for examples.\n\n" }, \
{ "redo", "redo LABEL\nredo EXPR\nredo    The \"redo\" command restarts the loop block without evaluating\nthe conditional again. The \"continue\" block, if any, is not\nexecuted. If the LABEL is omitted, the command refers to the\ninnermost enclosing loop. The \"redo EXPR\" form, available\nstarting in Perl 5.18.0, allows a label name to be computed at\nrun time, and is otherwise identical to \"redo LABEL\". Programs\nthat want to lie to themselves about what was just input\nnormally use this command:\n\n" }, \
{ "ref", "ref EXPR\nref     Examines the value of EXPR, expecting it to be a reference, and\nreturns a string giving information about the reference and the\ntype of referent. If EXPR is not specified, $_ will be used.\n\n" }, \
{ "rename", "rename OLDNAME,NEWNAME\nChanges the name of a file; an existing file NEWNAME will be\nclobbered. Returns true for success, false otherwise.\n\n" }, \
{ "require", "require VERSION\nrequire EXPR\nrequire Demands a version of Perl specified by VERSION, or demands some\nsemantics specified by EXPR or by $_ if EXPR is not supplied.\n\n" }, \
{ "reset", "reset EXPR\nreset   Generally used in a \"continue\" block at the end of a loop to\nclear variables and reset \"m?pattern?\" searches so that they\nwork again. The expression is interpreted as a list of single\ncharacters (hyphens allowed for ranges). All variables and\narrays beginning with one of those letters are reset to their\npristine state. If the expression is omitted, one-match searches\n(\"m?pattern?\") are reset to match again. Only resets variables\nor searches in the current package. Always returns 1. Examples:\n\n" }, \
{ "return", "return EXPR\nreturn  Returns from a subroutine, \"eval\", \"do FILE\", \"sort\" block or\nregex eval block (but not a \"grep\" or \"map\" block) with the\nvalue given in EXPR. Evaluation of EXPR may be in list, scalar,\nor void context, depending on how the return value will be used,\nand the context may vary from one execution to the next (see\n\"wantarray\"). If no EXPR is given, returns an empty list in list\ncontext, the undefined value in scalar context, and (of course)\nnothing at all in void context.\n\n" }, \
{ "reverse", "reverse LIST\nIn list context, returns a list value consisting of the elements\nof LIST in the opposite order. In scalar context, concatenates\nthe elements of LIST and returns a string value with all\ncharacters in the opposite order.\n\n" }, \
{ "rewinddir", "rewinddir DIRHANDLE\nSets the current position to the beginning of the directory for\nthe \"readdir\" routine on DIRHANDLE.\n\n" }, \
{ "rindex", "rindex STR,SUBSTR,POSITION\nrindex STR,SUBSTR\nWorks just like \"index\" except that it returns the position of\nthe *last* occurrence of SUBSTR in STR. If POSITION is\nspecified, returns the last occurrence beginning at or before\nthat position.\n\n" }, \
{ "rmdir", "rmdir FILENAME\nrmdir   Deletes the directory specified by FILENAME if that directory is\nempty. If it succeeds it returns true; otherwise it returns\nfalse and sets $! (errno). If FILENAME is omitted, uses $_.\n\n" }, \
{ "s", "\"s/*PATTERN*/*REPLACEMENT*/msixpodualngcer\"\nSearches a string for a pattern, and if found, replaces that\npattern with the replacement text and returns the number of\nsubstitutions made. Otherwise it returns false (a value that is\nboth an empty string (\"\") and numeric zero (0) as described in\n\"Relational Operators\").\n\n" }, \
{ "say", "say FILEHANDLE LIST\nsay FILEHANDLE\nsay LIST\nsay     Just like \"print\", but implicitly appends a newline. \"say LIST\"\nis simply an abbreviation for \"{ local $\\ = \"\\n\"; print LIST }\".\nTo use FILEHANDLE without a LIST to print the contents of $_ to\nit, you must use a bareword filehandle like \"FH\", not an\nindirect one like $fh.\n\n" }, \
{ "scalar", "scalar EXPR\nForces EXPR to be interpreted in scalar context and returns the\nvalue of EXPR.\n\n" }, \
{ "seek", "seek FILEHANDLE,POSITION,WHENCE\nSets FILEHANDLE's position, just like the fseek(3) call of C\n\"stdio\". FILEHANDLE may be an expression whose value gives the\nname of the filehandle. The values for WHENCE are 0 to set the\nnew position *in bytes* to POSITION; 1 to set it to the current\nposition plus POSITION; and 2 to set it to EOF plus POSITION,\ntypically negative. For WHENCE you may use the constants\n\"SEEK_SET\", \"SEEK_CUR\", and \"SEEK_END\" (start of the file,\ncurrent position, end of the file) from the Fcntl module.\nReturns 1 on success, false otherwise.\n\n" }, \
{ "seekdir", "seekdir DIRHANDLE,POS\nSets the current position for the \"readdir\" routine on\nDIRHANDLE. POS must be a value returned by \"telldir\". \"seekdir\"\nalso has the same caveats about possible directory compaction as\nthe corresponding system library routine.\n\n" }, \
{ "select", "select FILEHANDLE\nselect  Returns the currently selected filehandle. If FILEHANDLE is\nsupplied, sets the new current default filehandle for output.\nThis has two effects: first, a \"write\" or a \"print\" without a\nfilehandle default to this FILEHANDLE. Second, references to\nvariables related to output will refer to this output channel.\n\n" }, \
{ "semctl", "semctl ID,SEMNUM,CMD,ARG\nCalls the System V IPC function semctl(2). You'll probably have\nto say\n\n" }, \
{ "semget", "semget KEY,NSEMS,FLAGS\nCalls the System V IPC function semget(2). Returns the semaphore\nid, or the undefined value on error. See also \"SysV IPC\" in\nperlipc and the documentation for \"IPC::SysV\" and\n\"IPC::Semaphore\".\n\n" }, \
{ "semop", "semop KEY,OPSTRING\nCalls the System V IPC function semop(2) for semaphore\noperations such as signalling and waiting. OPSTRING must be a\npacked array of semop structures. Each semop structure can be\ngenerated with \"pack(\"s!3\", $semnum, $semop, $semflag)\". The\nlength of OPSTRING implies the number of semaphore operations.\nReturns true if successful, false on error. As an example, the\nfollowing code waits on semaphore $semnum of semaphore id\n$semid:\n\n" }, \
{ "send", "send SOCKET,MSG,FLAGS,TO\nsend SOCKET,MSG,FLAGS\nSends a message on a socket. Attempts to send the scalar MSG to\nthe SOCKET filehandle. Takes the same flags as the system call\nof the same name. On unconnected sockets, you must specify a\ndestination to *send to*, in which case it does a sendto(2)\nsyscall. Returns the number of characters sent, or the undefined\nvalue on error. The sendmsg(2) syscall is currently\nunimplemented. See \"UDP: Message Passing\" in perlipc for\nexamples.\n\n" }, \
{ "setgrent", "setgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "sethostent", "sethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "setnetent", "setnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "setpgrp", "setpgrp PID,PGRP\nSets the current process group for the specified PID, 0 for the\ncurrent process. Raises an exception when used on a machine that\ndoesn't implement POSIX setpgid(2) or BSD setpgrp(2). If the\narguments are omitted, it defaults to \"0,0\". Note that the BSD\n4.2 version of \"setpgrp\" does not accept any arguments, so only\n\"setpgrp(0,0)\" is portable. See also \"POSIX::setsid()\".\n\n" }, \
{ "setpriority", "setpriority WHICH,WHO,PRIORITY\nSets the current priority for a process, a process group, or a\nuser. (See setpriority(2).) Raises an exception when used on a\nmachine that doesn't implement setpriority(2).\n\n" }, \
{ "setprotoent", "setprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "setpwent", "setpwent\nsetgrent\nsethostent STAYOPEN\nsetnetent STAYOPEN\nsetprotoent STAYOPEN\nsetservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "setservent", "setservent STAYOPEN\nendpwent\nendgrent\nendhostent\nendnetent\nendprotoent\nendservent\nThese routines are the same as their counterparts in the system\nC library. In list context, the return values from the various\nget routines are as follows:\n\n" }, \
{ "setsockopt", "setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL\nSets the socket option requested. Returns \"undef\" on error. Use\ninteger constants provided by the \"Socket\" module for LEVEL and\nOPNAME. Values for LEVEL can also be obtained from\ngetprotobyname. OPTVAL might either be a packed string or an\ninteger. An integer OPTVAL is shorthand for pack(\"i\", OPTVAL).\n\n" }, \
{ "shift", "shift ARRAY\nshift   Shifts the first value of the array off and returns it,\nshortening the array by 1 and moving everything down. If there\nare no elements in the array, returns the undefined value. If\nARRAY is omitted, shifts the @_ array within the lexical scope\nof subroutines and formats, and the @ARGV array outside a\nsubroutine and also within the lexical scopes established by the\n\"eval STRING\", \"BEGIN {}\", \"INIT {}\", \"CHECK {}\", \"UNITCHECK\n{}\", and \"END {}\" constructs.\n\n" }, \
{ "shmctl", "shmctl ID,CMD,ARG\nCalls the System V IPC function shmctl. You'll probably have to\nsay\n\n" }, \
{ "shmget", "shmget KEY,SIZE,FLAGS\nCalls the System V IPC function shmget. Returns the shared\nmemory segment id, or \"undef\" on error. See also \"SysV IPC\" in\nperlipc and the documentation for \"IPC::SysV\".\n\n" }, \
{ "shmread", "shmread ID,VAR,POS,SIZE\nshmwrite ID,STRING,POS,SIZE\nReads or writes the System V shared memory segment ID starting\nat position POS for size SIZE by attaching to it, copying\nin/out, and detaching from it. When reading, VAR must be a\nvariable that will hold the data read. When writing, if STRING\nis too long, only SIZE bytes are used; if STRING is too short,\nnulls are written to fill out SIZE bytes. Return true if\nsuccessful, false on error. \"shmread\" taints the variable. See\nalso \"SysV IPC\" in perlipc and the documentation for \"IPC::SysV\"\nand the \"IPC::Shareable\" module from CPAN.\n\n" }, \
{ "shmwrite", "shmwrite ID,STRING,POS,SIZE\nReads or writes the System V shared memory segment ID starting\nat position POS for size SIZE by attaching to it, copying\nin/out, and detaching from it. When reading, VAR must be a\nvariable that will hold the data read. When writing, if STRING\nis too long, only SIZE bytes are used; if STRING is too short,\nnulls are written to fill out SIZE bytes. Return true if\nsuccessful, false on error. \"shmread\" taints the variable. See\nalso \"SysV IPC\" in perlipc and the documentation for \"IPC::SysV\"\nand the \"IPC::Shareable\" module from CPAN.\n\n" }, \
{ "shutdown", "shutdown SOCKET,HOW\nShuts down a socket connection in the manner indicated by HOW,\nwhich has the same interpretation as in the syscall of the same\nname.\n\n" }, \
{ "sin", "sin EXPR\nsin     Returns the sine of EXPR (expressed in radians). If EXPR is\nomitted, returns sine of $_.\n\n" }, \
{ "sleep", "sleep EXPR\nsleep   Causes the script to sleep for (integer) EXPR seconds, or\nforever if no argument is given. Returns the integer number of\nseconds actually slept.\n\n" }, \
{ "socket", "socket SOCKET,DOMAIN,TYPE,PROTOCOL\nOpens a socket of the specified kind and attaches it to\nfilehandle SOCKET. DOMAIN, TYPE, and PROTOCOL are specified the\nsame as for the syscall of the same name. You should \"use\nSocket\" first to get the proper definitions imported. See the\nexamples in \"Sockets: Client/Server Communication\" in perlipc.\n\n" }, \
{ "socketpair", "socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL\nCreates an unnamed pair of sockets in the specified domain, of\nthe specified type. DOMAIN, TYPE, and PROTOCOL are specified the\nsame as for the syscall of the same name. If unimplemented,\nraises an exception. Returns true if successful.\n\n" }, \
{ "sort", "sort SUBNAME LIST\nsort BLOCK LIST\nsort LIST\nIn list context, this sorts the LIST and returns the sorted list\nvalue. In scalar context, the behaviour of \"sort\" is undefined.\n\n" }, \
{ "splice", "splice ARRAY,OFFSET,LENGTH,LIST\nsplice ARRAY,OFFSET,LENGTH\nsplice ARRAY,OFFSET\nsplice ARRAY\nRemoves the elements designated by OFFSET and LENGTH from an\narray, and replaces them with the elements of LIST, if any. In\nlist context, returns the elements removed from the array. In\nscalar context, returns the last element removed, or \"undef\" if\nno elements are removed. The array grows or shrinks as\nnecessary. If OFFSET is negative then it starts that far from\nthe end of the array. If LENGTH is omitted, removes everything\nfrom OFFSET onward. If LENGTH is negative, removes the elements\nfrom OFFSET onward except for -LENGTH elements at the end of the\narray. If both OFFSET and LENGTH are omitted, removes\neverything. If OFFSET is past the end of the array and a LENGTH\nwas provided, Perl issues a warning, and splices at the end of\nthe array.\n\n" }, \
{ "split", "split /PATTERN/,EXPR,LIMIT\nsplit /PATTERN/,EXPR\nsplit /PATTERN/\nsplit   Splits the string EXPR into a list of strings and returns the\nlist in list context, or the size of the list in scalar context.\n(Prior to Perl 5.11, it also overwrote @_ with the list in void\nand scalar context. If you target old perls, beware.)\n\n" }, \
{ "sprintf", "sprintf FORMAT, LIST\nReturns a string formatted by the usual \"printf\" conventions of\nthe C library function \"sprintf\". See below for more details and\nsee sprintf(3) or printf(3) on your system for an explanation of\nthe general principles.\n\n" }, \
{ "sqrt", "sqrt EXPR\nsqrt    Return the positive square root of EXPR. If EXPR is omitted,\nuses $_. Works only for non-negative operands unless you've\nloaded the \"Math::Complex\" module.\n\n" }, \
{ "srand", "srand EXPR\nsrand   Sets and returns the random number seed for the \"rand\" operator.\n\n" }, \
{ "stat", "stat FILEHANDLE\nstat EXPR\nstat DIRHANDLE\nstat    Returns a 13-element list giving the status info for a file,\neither the file opened via FILEHANDLE or DIRHANDLE, or named by\nEXPR. If EXPR is omitted, it stats $_ (not \"_\"!). Returns the\nempty list if \"stat\" fails. Typically used as follows:\n\n" }, \
{ "state", "state VARLIST\nstate TYPE VARLIST\nstate VARLIST : ATTRS\nstate TYPE VARLIST : ATTRS\n\"state\" declares a lexically scoped variable, just like \"my\".\nHowever, those variables will never be reinitialized, contrary\nto lexical variables that are reinitialized each time their\nenclosing block is entered. See \"Persistent Private Variables\"\nin perlsub for details.\n\n" }, \
{ "study", "study SCALAR\nstudy   At this time, \"study\" does nothing. This may change in the\nfuture.\n\n" }, \
{ "sub", "sub NAME BLOCK\nsub NAME (PROTO) BLOCK\nsub NAME : ATTRS BLOCK\nsub NAME (PROTO) : ATTRS BLOCK\nThis is subroutine definition, not a real function *per se*.\nWithout a BLOCK it's just a forward declaration. Without a NAME,\nit's an anonymous function declaration, so does return a value:\nthe CODE ref of the closure just created.\n\n" }, \
{ "__SUB__", "__SUB__ A special token that returns a reference to the current\nsubroutine, or \"undef\" outside of a subroutine.\n\n" }, \
{ "substr", "substr EXPR,OFFSET,LENGTH,REPLACEMENT\nsubstr EXPR,OFFSET,LENGTH\nsubstr EXPR,OFFSET\nExtracts a substring out of EXPR and returns it. First character\nis at offset zero. If OFFSET is negative, starts that far back\nfrom the end of the string. If LENGTH is omitted, returns\neverything through the end of the string. If LENGTH is negative,\nleaves that many characters off the end of the string.\n\n" }, \
{ "symlink", "symlink OLDFILE,NEWFILE\nCreates a new filename symbolically linked to the old filename.\nReturns 1 for success, 0 otherwise. On systems that don't\nsupport symbolic links, raises an exception. To check for that,\nuse eval:\n\n" }, \
{ "syscall", "syscall NUMBER, LIST\nCalls the system call specified as the first element of the\nlist, passing the remaining elements as arguments to the system\ncall. If unimplemented, raises an exception. The arguments are\ninterpreted as follows: if a given argument is numeric, the\nargument is passed as an int. If not, the pointer to the string\nvalue is passed. You are responsible to make sure a string is\npre-extended long enough to receive any result that might be\nwritten into a string. You can't use a string literal (or other\nread-only string) as an argument to \"syscall\" because Perl has\nto assume that any string pointer might be written through. If\nyour integer arguments are not literals and have never been\ninterpreted in a numeric context, you may need to add 0 to them\nto force them to look like numbers. This emulates the \"syswrite\"\nfunction (or vice versa):\n\n" }, \
{ "sysopen", "sysopen FILEHANDLE,FILENAME,MODE\nsysopen FILEHANDLE,FILENAME,MODE,PERMS\nOpens the file whose filename is given by FILENAME, and\nassociates it with FILEHANDLE. If FILEHANDLE is an expression,\nits value is used as the real filehandle wanted; an undefined\nscalar will be suitably autovivified. This function calls the\nunderlying operating system's open(2) function with the\nparameters FILENAME, MODE, and PERMS.\n\n" }, \
{ "sysread", "sysread FILEHANDLE,SCALAR,LENGTH,OFFSET\nsysread FILEHANDLE,SCALAR,LENGTH\nAttempts to read LENGTH bytes of data into variable SCALAR from\nthe specified FILEHANDLE, using read(2). It bypasses buffered\nIO, so mixing this with other kinds of reads, \"print\", \"write\",\n\"seek\", \"tell\", or \"eof\" can cause confusion because the perlio\nor stdio layers usually buffer data. Returns the number of bytes\nactually read, 0 at end of file, or undef if there was an error\n(in the latter case $! is also set). SCALAR will be grown or\nshrunk so that the last byte actually read is the last byte of\nthe scalar after the read.\n\n" }, \
{ "sysseek", "sysseek FILEHANDLE,POSITION,WHENCE\nSets FILEHANDLE's system position *in bytes* using lseek(2).\nFILEHANDLE may be an expression whose value gives the name of\nthe filehandle. The values for WHENCE are 0 to set the new\nposition to POSITION; 1 to set the it to the current position\nplus POSITION; and 2 to set it to EOF plus POSITION, typically\nnegative.\n\n" }, \
{ "system", "system LIST\nsystem PROGRAM LIST\nDoes exactly the same thing as \"exec\", except that a fork is\ndone first and the parent process waits for the child process to\nexit. Note that argument processing varies depending on the\nnumber of arguments. If there is more than one argument in LIST,\nor if LIST is an array with more than one value, starts the\nprogram given by the first element of the list with arguments\ngiven by the rest of the list. If there is only one scalar\nargument, the argument is checked for shell metacharacters, and\nif there are any, the entire argument is passed to the system's\ncommand shell for parsing (this is \"/bin/sh -c\" on Unix\nplatforms, but varies on other platforms). If there are no shell\nmetacharacters in the argument, it is split into words and\npassed directly to \"execvp\", which is more efficient. On\nWindows, only the \"system PROGRAM LIST\" syntax will reliably\navoid using the shell; \"system LIST\", even with more than one\nelement, will fall back to the shell if the first spawn fails.\n\n" }, \
{ "syswrite", "syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET\nsyswrite FILEHANDLE,SCALAR,LENGTH\nsyswrite FILEHANDLE,SCALAR\nAttempts to write LENGTH bytes of data from variable SCALAR to\nthe specified FILEHANDLE, using write(2). If LENGTH is not\nspecified, writes whole SCALAR. It bypasses buffered IO, so\nmixing this with reads (other than \"sysread)\"), \"print\",\n\"write\", \"seek\", \"tell\", or \"eof\" may cause confusion because\nthe perlio and stdio layers usually buffer data. Returns the\nnumber of bytes actually written, or \"undef\" if there was an\nerror (in this case the errno variable $! is also set). If the\nLENGTH is greater than the data available in the SCALAR after\nthe OFFSET, only as much data as is available will be written.\n\n" }, \
{ "tell", "tell FILEHANDLE\ntell    Returns the current position *in bytes* for FILEHANDLE, or -1 on\nerror. FILEHANDLE may be an expression whose value gives the\nname of the actual filehandle. If FILEHANDLE is omitted, assumes\nthe file last read.\n\n" }, \
{ "telldir", "telldir DIRHANDLE\nReturns the current position of the \"readdir\" routines on\nDIRHANDLE. Value may be given to \"seekdir\" to access a\nparticular location in a directory. \"telldir\" has the same\ncaveats about possible directory compaction as the corresponding\nsystem library routine.\n\n" }, \
{ "tie", "tie VARIABLE,CLASSNAME,LIST\nThis function binds a variable to a package class that will\nprovide the implementation for the variable. VARIABLE is the\nname of the variable to be enchanted. CLASSNAME is the name of a\nclass implementing objects of correct type. Any additional\narguments are passed to the appropriate constructor method of\nthe class (meaning \"TIESCALAR\", \"TIEHANDLE\", \"TIEARRAY\", or\n\"TIEHASH\"). Typically these are arguments such as might be\npassed to the dbm_open(3) function of C. The object returned by\nthe constructor is also returned by the \"tie\" function, which\nwould be useful if you want to access other methods in\nCLASSNAME.\n\n" }, \
{ "tied", "tied VARIABLE\nReturns a reference to the object underlying VARIABLE (the same\nvalue that was originally returned by the \"tie\" call that bound\nthe variable to a package.) Returns the undefined value if\nVARIABLE isn't tied to a package.\n\n" }, \
{ "time", "time    Returns the number of non-leap seconds since whatever time the\nsystem considers to be the epoch, suitable for feeding to\n\"gmtime\" and \"localtime\". On most systems the epoch is 00:00:00\nUTC, January 1, 1970; a prominent exception being Mac OS Classic\nwhich uses 00:00:00, January 1, 1904 in the current local time\nzone for its epoch.\n\n" }, \
{ "times", "times   Returns a four-element list giving the user and system times in\nseconds for this process and any exited children of this\nprocess.\n\n" }, \
{ "tr", "\"tr/*SEARCHLIST*/*REPLACEMENTLIST*/cdsr\"\nTransliterates all occurrences of the characters found in the\nsearch list with the corresponding character in the replacement\nlist. It returns the number of characters replaced or deleted.\nIf no string is specified via the \"=~\" or \"!~\" operator, the $_\nstring is transliterated.\n\n" }, \
{ "truncate", "truncate FILEHANDLE,LENGTH\ntruncate EXPR,LENGTH\nTruncates the file opened on FILEHANDLE, or named by EXPR, to\nthe specified length. Raises an exception if truncate isn't\nimplemented on your system. Returns true if successful, \"undef\"\non error.\n\n" }, \
{ "uc", "uc EXPR\nuc      Returns an uppercased version of EXPR. This is the internal\nfunction implementing the \"\\U\" escape in double-quoted strings.\nIt does not attempt to do titlecase mapping on initial letters.\nSee \"ucfirst\" for that.\n\n" }, \
{ "ucfirst", "ucfirst EXPR\nucfirst Returns the value of EXPR with the first character in uppercase\n(titlecase in Unicode). This is the internal function\nimplementing the \"\\u\" escape in double-quoted strings.\n\n" }, \
{ "umask", "umask EXPR\numask   Sets the umask for the process to EXPR and returns the previous\nvalue. If EXPR is omitted, merely returns the current umask.\n\n" }, \
{ "undef", "undef EXPR\nundef   Undefines the value of EXPR, which must be an lvalue. Use only\non a scalar value, an array (using \"@\"), a hash (using \"%\"), a\nsubroutine (using \"&\"), or a typeglob (using \"*\"). Saying \"undef\n$hash{$key}\" will probably not do what you expect on most\npredefined variables or DBM list values, so don't do that; see\n\"delete\". Always returns the undefined value. You can omit the\nEXPR, in which case nothing is undefined, but you still get an\nundefined value that you could, for instance, return from a\nsubroutine, assign to a variable, or pass as a parameter.\nExamples:\n\n" }, \
{ "UNITCHECK", "UNITCHECK\nThese compile phase keywords are documented in \"BEGIN,\nUNITCHECK, CHECK, INIT and END\" in perlmod.\n\n" }, \
{ "unless", "unless\nuntil\nwhile   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "unlink", "unlink LIST\nunlink  Deletes a list of files. On success, it returns the number of\nfiles it successfully deleted. On failure, it returns false and\nsets $! (errno):\n\n" }, \
{ "unpack", "unpack TEMPLATE,EXPR\nunpack TEMPLATE\n\"unpack\" does the reverse of \"pack\": it takes a string and\nexpands it out into a list of values. (In scalar context, it\nreturns merely the first value produced.)\n\n" }, \
{ "unshift", "unshift ARRAY,LIST\nDoes the opposite of a \"shift\". Or the opposite of a \"push\",\ndepending on how you look at it. Prepends list to the front of\nthe array and returns the new number of elements in the array.\n\n" }, \
{ "untie", "untie VARIABLE\nBreaks the binding between a variable and a package. (See tie.)\nHas no effect if the variable is not tied.\n\n" }, \
{ "until", "until\nwhile   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "use", "use Module VERSION LIST\nuse Module VERSION\nuse Module LIST\nuse Module\nuse VERSION\nImports some semantics into the current package from the named\nmodule, generally by aliasing certain subroutine or variable\nnames into your package. It is exactly equivalent to\n\n" }, \
{ "utime", "utime LIST\nChanges the access and modification times on each file of a list\nof files. The first two elements of the list must be the NUMERIC\naccess and modification times, in that order. Returns the number\nof files successfully changed. The inode change time of each\nfile is set to the current time. For example, this code has the\nsame effect as the Unix touch(1) command when the files *already\nexist* and belong to the user running the program:\n\n" }, \
{ "values", "values HASH\nvalues ARRAY\nIn list context, returns a list consisting of all the values of\nthe named hash. In Perl 5.12 or later only, will also return a\nlist of the values of an array; prior to that release,\nattempting to use an array argument will produce a syntax error.\nIn scalar context, returns the number of values.\n\n" }, \
{ "vec", "vec EXPR,OFFSET,BITS\nTreats the string in EXPR as a bit vector made up of elements of\nwidth BITS and returns the value of the element specified by\nOFFSET as an unsigned integer. BITS therefore specifies the\nnumber of bits that are reserved for each element in the bit\nvector. This must be a power of two from 1 to 32 (or 64, if your\nplatform supports that).\n\n" }, \
{ "wait", "wait    Behaves like wait(2) on your system: it waits for a child\nprocess to terminate and returns the pid of the deceased\nprocess, or -1 if there are no child processes. The status is\nreturned in $? and \"${^CHILD_ERROR_NATIVE}\". Note that a return\nvalue of -1 could mean that child processes are being\nautomatically reaped, as described in perlipc.\n\n" }, \
{ "waitpid", "waitpid PID,FLAGS\nWaits for a particular child process to terminate and returns\nthe pid of the deceased process, or -1 if there is no such child\nprocess. A non-blocking wait (with WNOHANG in FLAGS) can return\n0 if there are child processes matching PID but none have\nterminated yet. The status is returned in $? and\n\"${^CHILD_ERROR_NATIVE}\".\n\n" }, \
{ "wantarray", "wantarray\nReturns true if the context of the currently executing\nsubroutine or \"eval\" is looking for a list value. Returns false\nif the context is looking for a scalar. Returns the undefined\nvalue if the context is looking for no value (void context).\n\n" }, \
{ "warn", "warn LIST\nEmits a warning, usually by printing it to \"STDERR\". \"warn\"\ninterprets its operand LIST in the same way as \"die\", but is\nslightly different in what it defaults to when LIST is empty or\nmakes an empty string. If it is empty and $@ already contains an\nexception value then that value is used after appending\n\"\\t...caught\". If it is empty and $@ is also empty then the\nstring \"\"Warning: Something's wrong\"\" is used.\n\n" }, \
{ "when", "when    These flow-control keywords related to the experimental switch\nfeature are documented in \"Switch Statements\" in perlsyn.\n\n" }, \
{ "while", "while   These flow-control keywords are documented in \"Compound\nStatements\" in perlsyn.\n\n" }, \
{ "write", "write FILEHANDLE\nwrite EXPR\nwrite   Writes a formatted record (possibly multi-line) to the specified\nFILEHANDLE, using the format associated with that file. By\ndefault the format for a file is the one having the same name as\nthe filehandle, but the format for the current output channel\n(see the \"select\" function) may be set explicitly by assigning\nthe name of the format to the $~ variable.\n\n" }, \
{ "-X", "-X FILEHANDLE\n-X EXPR\n-X DIRHANDLE\n-X      A file test, where X is one of the letters listed below. This\nunary operator takes one argument, either a filename, a\nfilehandle, or a dirhandle, and tests the associated file to see\nif something is true about it. If the argument is omitted, tests\n$_, except for \"-t\", which tests STDIN. Unless otherwise\ndocumented, it returns 1 for true and '' for false. If the file\ndoesn't exist or can't be examined, it returns \"undef\" and sets\n$! (errno). Despite the funny names, precedence is the same as\nany other named unary operator. The operator may be any of:\n\n" }, \
{ "xor", "xor     These operators are documented in perlop.\n\n" }, \
{ "y", "\"tr/*SEARCHLIST*/*REPLACEMENTLIST*/cdsr\"\nTransliterates all occurrences of the characters found in the\nsearch list with the corresponding character in the replacement\nlist. It returns the number of characters replaced or deleted.\nIf no string is specified via the \"=~\" or \"!~\" operator, the $_\nstring is transliterated.\n\n" }, \
};
/* @} */
