/* @{ */
static std::vector<std::array<std::string,2> > perlvar = {
{ "%!", "%OS_ERROR\n%ERRNO\n%!\n Each element of \"%!\" has a true value only if $! is set to that\nvalue. For example, $!{ENOENT} is true if and only if the\ncurrent value of $! is \"ENOENT\"; that is, if the most recent\nerror was \"No such file or directory\" (or its moral equivalent:\nnot all operating systems give that exact error, and certainly\nnot all languages). The specific true value is not guaranteed,\nbut in the past has generally been the numeric value of $!. To\ncheck if a particular key is meaningful on your system, use\n\"exists $!{the_key}\"; for a list of legal keys, use \"keys %!\".\nSee Errno for more information, and also see \"$!\".\n\n" }, \
{ "%+", "%{^CAPTURE}\n%LAST_PAREN_MATCH\n%+\n Similar to \"@+\", the \"%+\" hash allows access to the named\ncapture buffers, should they exist, in the last successful match\nin the currently active dynamic scope.\n\n" }, \
{ "%-", "%-\n Similar to \"%+\", this variable allows access to the named\ncapture groups in the last successful match in the currently\nactive dynamic scope. To each capture group name found in the\nregular expression, it associates a reference to an array\ncontaining the list of values captured by all buffers with that\nname (should there be several of them), in the order where they\nappear.\n\n" }, \
{ "@+", "@LAST_MATCH_END\n@+\n This array holds the offsets of the ends of the last successful\nsubmatches in the currently active dynamic scope. $+[0] is the\noffset into the string of the end of the entire match. This is\nthe same value as what the \"pos\" function returns when called on\nthe variable that was matched against. The *n*th element of this\narray holds the offset of the *n*th submatch, so $+[1] is the\noffset past where $1 ends, $+[2] the offset past where $2 ends,\nand so on. You can use $#+ to determine how many subgroups were\nin the last successful match. See the examples given for the\n\"@-\" variable.\n\n" }, \
{ "@-", "@LAST_MATCH_START\n@-\n $-[0] is the offset of the start of the last successful match.\n\"$-[\"*n*\"]\" is the offset of the start of the substring matched\nby *n*-th subpattern, or undef if the subpattern did not match.\n\n" }, \
{ "@_", "@ARG\n@_\n Within a subroutine the array @_ contains the parameters passed\nto that subroutine. Inside a subroutine, @_ is the default array\nfor the array operators \"pop\" and \"shift\".\n\n" }, \
{ "$!", "$OS_ERROR\n$ERRNO\n$!\n When referenced, $! retrieves the current value of the C \"errno\"\ninteger variable. If $! is assigned a numerical value, that\nvalue is stored in \"errno\". When referenced as a string, $!\nyields the system error string corresponding to \"errno\".\n\n" }, \
{ "$#", "$#\n $# was a variable that could be used to format printed numbers.\nAfter a deprecation cycle, its magic was removed in Perl v5.10.0\nand using it now triggers a warning: \"$# is no longer\nsupported\".\n\n" }, \
{ "$%", "HANDLE->format_page_number(EXPR)\n$FORMAT_PAGE_NUMBER\n$%\n The current page number of the currently selected output\nchannel.\n\n" }, \
{ "$&", "$MATCH\n$&\n The string matched by the last successful pattern match (not\ncounting any matches hidden within a BLOCK or \"eval()\" enclosed\nby the current BLOCK).\n\n" }, \
{ "$'", "$POSTMATCH\n$'\n The string following whatever was matched by the last successful\npattern match (not counting any matches hidden within a BLOCK or\n\"eval()\" enclosed by the current BLOCK). Example:\n\n" }, \
{ "$(", "$REAL_GROUP_ID\n$GID\n$(\n The real gid of this process. If you are on a machine that\nsupports membership in multiple groups simultaneously, gives a\nspace separated list of groups you are in. The first number is\nthe one returned by \"getgid()\", and the subsequent ones by\n\"getgroups()\", one of which may be the same as the first number.\n\n" }, \
{ "$)", "$EFFECTIVE_GROUP_ID\n$EGID\n$)\n The effective gid of this process. If you are on a machine that\nsupports membership in multiple groups simultaneously, gives a\nspace separated list of groups you are in. The first number is\nthe one returned by \"getegid()\", and the subsequent ones by\n\"getgroups()\", one of which may be the same as the first number.\n\n" }, \
{ "$+", "$LAST_PAREN_MATCH\n$+\n The text matched by the last bracket of the last successful\nsearch pattern. This is useful if you don't know which one of a\nset of alternative patterns matched. For example:\n\n" }, \
{ "$,", "IO::Handle->output_field_separator( EXPR )\n$OUTPUT_FIELD_SEPARATOR\n$OFS\n$,\n The output field separator for the print operator. If defined,\nthis value is printed between each of print's arguments. Default\nis \"undef\".\n\n" }, \
{ "$-", "HANDLE->format_lines_left(EXPR)\n$FORMAT_LINES_LEFT\n$-\n The number of lines left on the page of the currently selected\noutput channel.\n\n" }, \
{ "$.", "HANDLE->input_line_number( EXPR )\n$INPUT_LINE_NUMBER\n$NR\n$.\n Current line number for the last filehandle accessed.\n\n" }, \
{ "$/", "IO::Handle->input_record_separator( EXPR )\n$INPUT_RECORD_SEPARATOR\n$RS\n$/\n The input record separator, newline by default. This influences\nPerl's idea of what a \"line\" is. Works like awk's RS variable,\nincluding treating empty lines as a terminator if set to the\nnull string (an empty line cannot contain any spaces or tabs).\nYou may set it to a multi-character string to match a\nmulti-character terminator, or to \"undef\" to read through the\nend of file. Setting it to \"\\n\\n\" means something slightly\ndifferent than setting to \"\", if the file contains consecutive\nempty lines. Setting to \"\" will treat two or more consecutive\nempty lines as a single empty line. Setting to \"\\n\\n\" will\nblindly assume that the next input character belongs to the next\nparagraph, even if it's a newline.\n\n" }, \
{ "$:", "IO::Handle->format_line_break_characters EXPR\n$FORMAT_LINE_BREAK_CHARACTERS\n$:\n The current set of characters after which a string may be broken\nto fill continuation fields (starting with \"^\") in a format. The\ndefault is \" \\n-\", to break on a space, newline, or a hyphen.\n\n" }, \
{ "$;", "$SUBSCRIPT_SEPARATOR\n$SUBSEP\n$;\n The subscript separator for multidimensional array emulation. If\nyou refer to a hash element as\n\n" }, \
{ "$<", "$REAL_USER_ID\n$UID\n$<\n The real uid of this process. You can change both the real uid\nand the effective uid at the same time by using\n\"POSIX::setuid()\". Since changes to $< require a system call,\ncheck $! after a change attempt to detect any possible errors.\n\n" }, \
{ "$=", "HANDLE->format_lines_per_page(EXPR)\n$FORMAT_LINES_PER_PAGE\n$=\n The current page length (printable lines) of the currently\nselected output channel. The default is 60.\n\n" }, \
{ "$>", "$EFFECTIVE_USER_ID\n$EUID\n$>\n The effective uid of this process. For example:\n\n" }, \
{ "$@", "$EVAL_ERROR\n$@\n The Perl error from the last \"eval\" operator, i.e. the last\nexception that was caught. For \"eval BLOCK\", this is either a\nruntime error message or the string or reference \"die\" was\ncalled with. The \"eval STRING\" form also catches syntax errors\nand other compile time exceptions.\n\n" }, \
{ "$[", "$[\n This variable stores the index of the first element in an array,\nand of the first character in a substring. The default is 0, but\nyou could theoretically set it to 1 to make Perl behave more\nlike awk (or Fortran) when subscripting and when evaluating the\nindex() and substr() functions.\n\n" }, \
{ "$]", "$OLD_PERL_VERSION\n$]\n The revision, version, and subversion of the Perl interpreter,\nrepresented as a decimal of the form 5.XXXYYY, where XXX is the\nversion / 1e3 and YYY is the subversion / 1e6. For example, Perl\nv5.10.1 would be \"5.010001\".\n\n" }, \
{ "$^", "HANDLE->format_top_name(EXPR)\n$FORMAT_TOP_NAME\n$^\n The name of the current top-of-page format for the currently\nselected output channel. The default is the name of the\nfilehandle with \"_TOP\" appended. For example, the default format\ntop name for the \"STDOUT\" filehandle is \"STDOUT_TOP\".\n\n" }, \
{ "$_", "$ARG\n$_\n The default input and pattern-searching space. The following\npairs are equivalent:\n\n" }, \
{ "$`", "$PREMATCH\n$`\n The string preceding whatever was matched by the last successful\npattern match, not counting any matches hidden within a BLOCK or\n\"eval\" enclosed by the current BLOCK.\n\n" }, \
{ "$|", "HANDLE->autoflush( EXPR )\n$OUTPUT_AUTOFLUSH\n$|\n If set to nonzero, forces a flush right away and after every\nwrite or print on the currently selected output channel. Default\nis 0 (regardless of whether the channel is really buffered by\nthe system or not; $| tells you only whether you've asked Perl\nexplicitly to flush after each write). STDOUT will typically be\nline buffered if output is to the terminal and block buffered\notherwise. Setting this variable is useful primarily when you\nare outputting to a pipe or socket, such as when you are running\na Perl program under rsh and want to see the output as it's\nhappening. This has no effect on input buffering. See \"getc\" in\nperlfunc for that. See \"select\" in perlfunc on how to select the\noutput channel. See also IO::Handle.\n\n" }, \
{ "$~", "HANDLE->format_name(EXPR)\n$FORMAT_NAME\n$~\n The name of the current report format for the currently selected\noutput channel. The default format name is the same as the\nfilehandle name. For example, the default format name for the\n\"STDOUT\" filehandle is just \"STDOUT\".\n\n" }, \
{ "$$", "$PROCESS_ID\n$PID\n$$\n The process number of the Perl running this script. Though you\n*can* set this variable, doing so is generally discouraged,\nalthough it can be invaluable for some testing purposes. It will\nbe reset automatically across \"fork()\" calls.\n\n" }, \
{ "$0", "$PROGRAM_NAME\n$0\n Contains the name of the program being executed.\n\n" }, \
{ "$^A", "$ACCUMULATOR\n$^A\nThe current value of the \"write()\" accumulator for \"format()\"\nlines. A format contains \"formline()\" calls that put their\nresult into $^A. After calling its format, \"write()\" prints out\nthe contents of $^A and empties. So you never really see the\ncontents of $^A unless you call \"formline()\" yourself and then\nlook at it. See perlform and \"formline PICTURE,LIST\" in\nperlfunc.\n\n" }, \
{ "$a", "$a\n$b\n Special package variables when using \"sort()\", see \"sort\" in\nperlfunc. Because of this specialness $a and $b don't need to be\ndeclared (using \"use vars\", or \"our()\") even when using the\n\"strict 'vars'\" pragma. Don't lexicalize them with \"my $a\" or\n\"my $b\" if you want to be able to use them in the \"sort()\"\ncomparison block or function.\n\n" }, \
{ "$ACCUMULATOR", "$ACCUMULATOR\n$^A\nThe current value of the \"write()\" accumulator for \"format()\"\nlines. A format contains \"formline()\" calls that put their\nresult into $^A. After calling its format, \"write()\" prints out\nthe contents of $^A and empties. So you never really see the\ncontents of $^A unless you call \"formline()\" yourself and then\nlook at it. See perlform and \"formline PICTURE,LIST\" in\nperlfunc.\n\n" }, \
{ "$ARG", "$ARG\n$_\n The default input and pattern-searching space. The following\npairs are equivalent:\n\n" }, \
{ "$ARGV", "$ARGV\nContains the name of the current file when reading from \"<>\".\n\n" }, \
{ "$b", "$a\n$b\n Special package variables when using \"sort()\", see \"sort\" in\nperlfunc. Because of this specialness $a and $b don't need to be\ndeclared (using \"use vars\", or \"our()\") even when using the\n\"strict 'vars'\" pragma. Don't lexicalize them with \"my $a\" or\n\"my $b\" if you want to be able to use them in the \"sort()\"\ncomparison block or function.\n\n" }, \
{ "$BASETIME", "$BASETIME\n$^T\nThe time at which the program began running, in seconds since\nthe epoch (beginning of 1970). The values returned by the -M,\n-A, and -C filetests are based on this value.\n\n" }, \
{ "$^C", "$COMPILING\n$^C\nThe current value of the flag associated with the -c switch.\nMainly of use with -MO=... to allow code to alter its behavior\nwhen being compiled, such as for example to \"AUTOLOAD\" at\ncompile time rather than normal, deferred loading. Setting \"$^C\n= 1\" is similar to calling \"B::minus_c\".\n\n" }, \
{ "$CHILD_ERROR", "$CHILD_ERROR\n$?\n The status returned by the last pipe close, backtick (``)\ncommand, successful call to \"wait()\" or \"waitpid()\", or from the\n\"system()\" operator. This is just the 16-bit status word\nreturned by the traditional Unix \"wait()\" system call (or else\nis made up to look like it). Thus, the exit value of the\nsubprocess is really (\"$? >> 8\"), and \"$? & 127\" gives which\nsignal, if any, the process died from, and \"$? & 128\" reports\nwhether there was a core dump.\n\n" }, \
{ "${^CHILD_ERROR_NATIVE}", "${^CHILD_ERROR_NATIVE}\nThe native status returned by the last pipe close, backtick (``)\ncommand, successful call to \"wait()\" or \"waitpid()\", or from the\n\"system()\" operator. On POSIX-like systems this value can be\ndecoded with the WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG,\nWIFSTOPPED, WSTOPSIG and WIFCONTINUED functions provided by the\nPOSIX module.\n\n" }, \
{ "$COMPILING", "$COMPILING\n$^C\nThe current value of the flag associated with the -c switch.\nMainly of use with -MO=... to allow code to alter its behavior\nwhen being compiled, such as for example to \"AUTOLOAD\" at\ncompile time rather than normal, deferred loading. Setting \"$^C\n= 1\" is similar to calling \"B::minus_c\".\n\n" }, \
{ "$^D", "$DEBUGGING\n$^D\nThe current value of the debugging flags. May be read or set.\nLike its command-line equivalent, you can use numeric or\nsymbolic values, e.g. \"$^D = 10\" or \"$^D = \"st\"\". See\n\"-D*number*\" in perlrun. The contents of this variable also\naffects the debugger operation. See \"Debugger Internals\" in\nperldebguts.\n\n" }, \
{ "$DEBUGGING", "$DEBUGGING\n$^D\nThe current value of the debugging flags. May be read or set.\nLike its command-line equivalent, you can use numeric or\nsymbolic values, e.g. \"$^D = 10\" or \"$^D = \"st\"\". See\n\"-D*number*\" in perlrun. The contents of this variable also\naffects the debugger operation. See \"Debugger Internals\" in\nperldebguts.\n\n" }, \
{ "$^E", "$EXTENDED_OS_ERROR\n$^E\nError information specific to the current operating system. At\nthe moment, this differs from \"$!\" under only VMS, OS/2, and\nWin32 (and for MacPerl). On all other platforms, $^E is always\njust the same as $!.\n\n" }, \
{ "$EFFECTIVE_GROUP_ID", "$EFFECTIVE_GROUP_ID\n$EGID\n$)\n The effective gid of this process. If you are on a machine that\nsupports membership in multiple groups simultaneously, gives a\nspace separated list of groups you are in. The first number is\nthe one returned by \"getegid()\", and the subsequent ones by\n\"getgroups()\", one of which may be the same as the first number.\n\n" }, \
{ "$EFFECTIVE_USER_ID", "$EFFECTIVE_USER_ID\n$EUID\n$>\n The effective uid of this process. For example:\n\n" }, \
{ "$EGID", "$EFFECTIVE_GROUP_ID\n$EGID\n$)\n The effective gid of this process. If you are on a machine that\nsupports membership in multiple groups simultaneously, gives a\nspace separated list of groups you are in. The first number is\nthe one returned by \"getegid()\", and the subsequent ones by\n\"getgroups()\", one of which may be the same as the first number.\n\n" }, \
{ "${^ENCODING}", "${^ENCODING}\nThis variable is no longer supported.\n\n" }, \
{ "$ERRNO", "$OS_ERROR\n$ERRNO\n$!\n When referenced, $! retrieves the current value of the C \"errno\"\ninteger variable. If $! is assigned a numerical value, that\nvalue is stored in \"errno\". When referenced as a string, $!\nyields the system error string corresponding to \"errno\".\n\n" }, \
{ "$EUID", "$EFFECTIVE_USER_ID\n$EUID\n$>\n The effective uid of this process. For example:\n\n" }, \
{ "$EVAL_ERROR", "$EVAL_ERROR\n$@\n The Perl error from the last \"eval\" operator, i.e. the last\nexception that was caught. For \"eval BLOCK\", this is either a\nruntime error message or the string or reference \"die\" was\ncalled with. The \"eval STRING\" form also catches syntax errors\nand other compile time exceptions.\n\n" }, \
{ "$EXCEPTIONS_BEING_CAUGHT", "$EXCEPTIONS_BEING_CAUGHT\n$^S\nCurrent state of the interpreter.\n\n" }, \
{ "$EXECUTABLE_NAME", "$EXECUTABLE_NAME\n$^X\nThe name used to execute the current copy of Perl, from C's\n\"argv[0]\" or (where supported) /proc/self/exe.\n\n" }, \
{ "$EXTENDED_OS_ERROR", "$EXTENDED_OS_ERROR\n$^E\nError information specific to the current operating system. At\nthe moment, this differs from \"$!\" under only VMS, OS/2, and\nWin32 (and for MacPerl). On all other platforms, $^E is always\njust the same as $!.\n\n" }, \
{ "$^F", "$SYSTEM_FD_MAX\n$^F\nThe maximum system file descriptor, ordinarily 2. System file\ndescriptors are passed to \"exec()\"ed processes, while higher\nfile descriptors are not. Also, during an \"open()\", system file\ndescriptors are preserved even if the \"open()\" fails (ordinary\nfile descriptors are closed before the \"open()\" is attempted).\nThe close-on-exec status of a file descriptor will be decided\naccording to the value of $^F when the corresponding file, pipe,\nor socket was opened, not the time of the \"exec()\".\n\n" }, \
{ "$FORMAT_FORMFEED", "IO::Handle->format_formfeed(EXPR)\n$FORMAT_FORMFEED\n$^L\nWhat formats output as a form feed. The default is \"\\f\".\n\n" }, \
{ "$FORMAT_LINE_BREAK_CHARACTERS", "IO::Handle->format_line_break_characters EXPR\n$FORMAT_LINE_BREAK_CHARACTERS\n$:\n The current set of characters after which a string may be broken\nto fill continuation fields (starting with \"^\") in a format. The\ndefault is \" \\n-\", to break on a space, newline, or a hyphen.\n\n" }, \
{ "$FORMAT_LINES_LEFT", "HANDLE->format_lines_left(EXPR)\n$FORMAT_LINES_LEFT\n$-\n The number of lines left on the page of the currently selected\noutput channel.\n\n" }, \
{ "$FORMAT_LINES_PER_PAGE", "HANDLE->format_lines_per_page(EXPR)\n$FORMAT_LINES_PER_PAGE\n$=\n The current page length (printable lines) of the currently\nselected output channel. The default is 60.\n\n" }, \
{ "$FORMAT_NAME", "HANDLE->format_name(EXPR)\n$FORMAT_NAME\n$~\n The name of the current report format for the currently selected\noutput channel. The default format name is the same as the\nfilehandle name. For example, the default format name for the\n\"STDOUT\" filehandle is just \"STDOUT\".\n\n" }, \
{ "$FORMAT_PAGE_NUMBER", "HANDLE->format_page_number(EXPR)\n$FORMAT_PAGE_NUMBER\n$%\n The current page number of the currently selected output\nchannel.\n\n" }, \
{ "$FORMAT_TOP_NAME", "HANDLE->format_top_name(EXPR)\n$FORMAT_TOP_NAME\n$^\n The name of the current top-of-page format for the currently\nselected output channel. The default is the name of the\nfilehandle with \"_TOP\" appended. For example, the default format\ntop name for the \"STDOUT\" filehandle is \"STDOUT_TOP\".\n\n" }, \
{ "$GID", "$REAL_GROUP_ID\n$GID\n$(\n The real gid of this process. If you are on a machine that\nsupports membership in multiple groups simultaneously, gives a\nspace separated list of groups you are in. The first number is\nthe one returned by \"getgid()\", and the subsequent ones by\n\"getgroups()\", one of which may be the same as the first number.\n\n" }, \
{ "${^GLOBAL_PHASE}", "${^GLOBAL_PHASE}\nThe current phase of the perl interpreter.\n\n" }, \
{ "$^H", "$^H\nWARNING: This variable is strictly for internal use only. Its\navailability, behavior, and contents are subject to change\nwithout notice.\n\n" }, \
{ "$^I", "$INPLACE_EDIT\n$^I\nThe current value of the inplace-edit extension. Use \"undef\" to\ndisable inplace editing.\n\n" }, \
{ "$<I<digits>>", "$<*digits*> ($1, $2, ...)\nContains the subpattern from the corresponding set of capturing\nparentheses from the last successful pattern match, not counting\npatterns matched in nested blocks that have been exited already.\n\n" }, \
{ "$INPLACE_EDIT", "$INPLACE_EDIT\n$^I\nThe current value of the inplace-edit extension. Use \"undef\" to\ndisable inplace editing.\n\n" }, \
{ "$INPUT_LINE_NUMBER", "HANDLE->input_line_number( EXPR )\n$INPUT_LINE_NUMBER\n$NR\n$.\n Current line number for the last filehandle accessed.\n\n" }, \
{ "$INPUT_RECORD_SEPARATOR", "IO::Handle->input_record_separator( EXPR )\n$INPUT_RECORD_SEPARATOR\n$RS\n$/\n The input record separator, newline by default. This influences\nPerl's idea of what a \"line\" is. Works like awk's RS variable,\nincluding treating empty lines as a terminator if set to the\nnull string (an empty line cannot contain any spaces or tabs).\nYou may set it to a multi-character string to match a\nmulti-character terminator, or to \"undef\" to read through the\nend of file. Setting it to \"\\n\\n\" means something slightly\ndifferent than setting to \"\", if the file contains consecutive\nempty lines. Setting to \"\" will treat two or more consecutive\nempty lines as a single empty line. Setting to \"\\n\\n\" will\nblindly assume that the next input character belongs to the next\nparagraph, even if it's a newline.\n\n" }, \
{ "$^L", "IO::Handle->format_formfeed(EXPR)\n$FORMAT_FORMFEED\n$^L\nWhat formats output as a form feed. The default is \"\\f\".\n\n" }, \
{ "${^LAST_FH}", "${^LAST_FH}\nThis read-only variable contains a reference to the last-read\nfilehandle. This is set by \"<HANDLE>\", \"readline\", \"tell\", \"eof\"\nand \"seek\". This is the same handle that $. and \"tell\" and \"eof\"\nwithout arguments use. It is also the handle used when Perl\nappends \", <STDIN> line 1\" to an error or warning message.\n\n" }, \
{ "$LAST_PAREN_MATCH", "$LAST_PAREN_MATCH\n$+\n The text matched by the last bracket of the last successful\nsearch pattern. This is useful if you don't know which one of a\nset of alternative patterns matched. For example:\n\n" }, \
{ "$LAST_REGEXP_CODE_RESULT", "$LAST_REGEXP_CODE_RESULT\n$^R\nThe result of evaluation of the last successful \"(?{ code })\"\nregular expression assertion (see perlre). May be written to.\n\n" }, \
{ "$LAST_SUBMATCH_RESULT", "$LAST_SUBMATCH_RESULT\n$^N\nThe text matched by the used group most-recently closed (i.e.\nthe group with the rightmost closing parenthesis) of the last\nsuccessful search pattern.\n\n" }, \
{ "$LIST_SEPARATOR", "$LIST_SEPARATOR\n$\"\n When an array or an array slice is interpolated into a\ndouble-quoted string or a similar context such as \"/.../\", its\nelements are separated by this value. Default is a space. For\nexample, this:\n\n" }, \
{ "$^M", "$^M\nBy default, running out of memory is an untrappable, fatal\nerror. However, if suitably built, Perl can use the contents of\n$^M as an emergency memory pool after \"die()\"ing. Suppose that\nyour Perl were compiled with \"-DPERL_EMERGENCY_SBRK\" and used\nPerl's malloc. Then\n\n" }, \
{ "${^MATCH}", "${^MATCH}\nThis is similar to $& ($MATCH) except that it does not incur the\nperformance penalty associated with that variable.\n\n" }, \
{ "$MATCH", "$MATCH\n$&\n The string matched by the last successful pattern match (not\ncounting any matches hidden within a BLOCK or \"eval()\" enclosed\nby the current BLOCK).\n\n" }, \
{ "$^N", "$LAST_SUBMATCH_RESULT\n$^N\nThe text matched by the used group most-recently closed (i.e.\nthe group with the rightmost closing parenthesis) of the last\nsuccessful search pattern.\n\n" }, \
{ "$NR", "HANDLE->input_line_number( EXPR )\n$INPUT_LINE_NUMBER\n$NR\n$.\n Current line number for the last filehandle accessed.\n\n" }, \
{ "$^O", "$OSNAME\n$^O\nThe name of the operating system under which this copy of Perl\nwas built, as determined during the configuration process. For\nexamples see \"PLATFORMS\" in perlport.\n\n" }, \
{ "$OFS", "IO::Handle->output_field_separator( EXPR )\n$OUTPUT_FIELD_SEPARATOR\n$OFS\n$,\n The output field separator for the print operator. If defined,\nthis value is printed between each of print's arguments. Default\nis \"undef\".\n\n" }, \
{ "$OLD_PERL_VERSION", "$OLD_PERL_VERSION\n$]\n The revision, version, and subversion of the Perl interpreter,\nrepresented as a decimal of the form 5.XXXYYY, where XXX is the\nversion / 1e3 and YYY is the subversion / 1e6. For example, Perl\nv5.10.1 would be \"5.010001\".\n\n" }, \
{ "${^OPEN}", "${^OPEN}\nAn internal variable used by PerlIO. A string in two parts,\nseparated by a \"\\0\" byte, the first part describes the input\nlayers, the second part describes the output layers.\n\n" }, \
{ "$ORS", "IO::Handle->output_record_separator( EXPR )\n$OUTPUT_RECORD_SEPARATOR\n$ORS\n$\\\n The output record separator for the print operator. If defined,\nthis value is printed after the last of print's arguments.\nDefault is \"undef\".\n\n" }, \
{ "$OS_ERROR", "$OS_ERROR\n$ERRNO\n$!\n When referenced, $! retrieves the current value of the C \"errno\"\ninteger variable. If $! is assigned a numerical value, that\nvalue is stored in \"errno\". When referenced as a string, $!\nyields the system error string corresponding to \"errno\".\n\n" }, \
{ "$OSNAME", "$OSNAME\n$^O\nThe name of the operating system under which this copy of Perl\nwas built, as determined during the configuration process. For\nexamples see \"PLATFORMS\" in perlport.\n\n" }, \
{ "$OUTPUT_AUTOFLUSH", "HANDLE->autoflush( EXPR )\n$OUTPUT_AUTOFLUSH\n$|\n If set to nonzero, forces a flush right away and after every\nwrite or print on the currently selected output channel. Default\nis 0 (regardless of whether the channel is really buffered by\nthe system or not; $| tells you only whether you've asked Perl\nexplicitly to flush after each write). STDOUT will typically be\nline buffered if output is to the terminal and block buffered\notherwise. Setting this variable is useful primarily when you\nare outputting to a pipe or socket, such as when you are running\na Perl program under rsh and want to see the output as it's\nhappening. This has no effect on input buffering. See \"getc\" in\nperlfunc for that. See \"select\" in perlfunc on how to select the\noutput channel. See also IO::Handle.\n\n" }, \
{ "$OUTPUT_FIELD_SEPARATOR", "IO::Handle->output_field_separator( EXPR )\n$OUTPUT_FIELD_SEPARATOR\n$OFS\n$,\n The output field separator for the print operator. If defined,\nthis value is printed between each of print's arguments. Default\nis \"undef\".\n\n" }, \
{ "$OUTPUT_RECORD_SEPARATOR", "IO::Handle->output_record_separator( EXPR )\n$OUTPUT_RECORD_SEPARATOR\n$ORS\n$\\\n The output record separator for the print operator. If defined,\nthis value is printed after the last of print's arguments.\nDefault is \"undef\".\n\n" }, \
{ "$^P", "$PERLDB\n$^P\nThe internal variable for debugging support. The meanings of the\nvarious bits are subject to change, but currently indicate:\n\n" }, \
{ "$PERLDB", "$PERLDB\n$^P\nThe internal variable for debugging support. The meanings of the\nvarious bits are subject to change, but currently indicate:\n\n" }, \
{ "$PERL_VERSION", "$PERL_VERSION\n$^V\nThe revision, version, and subversion of the Perl interpreter,\nrepresented as a version object.\n\n" }, \
{ "$PID", "$PROCESS_ID\n$PID\n$$\n The process number of the Perl running this script. Though you\n*can* set this variable, doing so is generally discouraged,\nalthough it can be invaluable for some testing purposes. It will\nbe reset automatically across \"fork()\" calls.\n\n" }, \
{ "${^POSTMATCH}", "${^POSTMATCH}\nThis is similar to $' ($POSTMATCH) except that it does not incur\nthe performance penalty associated with that variable.\n\n" }, \
{ "$POSTMATCH", "$POSTMATCH\n$'\n The string following whatever was matched by the last successful\npattern match (not counting any matches hidden within a BLOCK or\n\"eval()\" enclosed by the current BLOCK). Example:\n\n" }, \
{ "${^PREMATCH}", "${^PREMATCH}\nThis is similar to $` ($PREMATCH) except that it does not incur\nthe performance penalty associated with that variable.\n\n" }, \
{ "$PREMATCH", "$PREMATCH\n$`\n The string preceding whatever was matched by the last successful\npattern match, not counting any matches hidden within a BLOCK or\n\"eval\" enclosed by the current BLOCK.\n\n" }, \
{ "$PROCESS_ID", "$PROCESS_ID\n$PID\n$$\n The process number of the Perl running this script. Though you\n*can* set this variable, doing so is generally discouraged,\nalthough it can be invaluable for some testing purposes. It will\nbe reset automatically across \"fork()\" calls.\n\n" }, \
{ "$PROGRAM_NAME", "$PROGRAM_NAME\n$0\n Contains the name of the program being executed.\n\n" }, \
{ "$^R", "$LAST_REGEXP_CODE_RESULT\n$^R\nThe result of evaluation of the last successful \"(?{ code })\"\nregular expression assertion (see perlre). May be written to.\n\n" }, \
{ "$REAL_GROUP_ID", "$REAL_GROUP_ID\n$GID\n$(\n The real gid of this process. If you are on a machine that\nsupports membership in multiple groups simultaneously, gives a\nspace separated list of groups you are in. The first number is\nthe one returned by \"getgid()\", and the subsequent ones by\n\"getgroups()\", one of which may be the same as the first number.\n\n" }, \
{ "$REAL_USER_ID", "$REAL_USER_ID\n$UID\n$<\n The real uid of this process. You can change both the real uid\nand the effective uid at the same time by using\n\"POSIX::setuid()\". Since changes to $< require a system call,\ncheck $! after a change attempt to detect any possible errors.\n\n" }, \
{ "${^RE_DEBUG_FLAGS}", "${^RE_DEBUG_FLAGS}\nThe current value of the regex debugging flags. Set to 0 for no\ndebug output even when the \"re 'debug'\" module is loaded. See re\nfor details.\n\n" }, \
{ "${^RE_TRIE_MAXBUF}", "${^RE_TRIE_MAXBUF}\nControls how certain regex optimisations are applied and how\nmuch memory they utilize. This value by default is 65536 which\ncorresponds to a 512kB temporary cache. Set this to a higher\nvalue to trade memory for speed when matching large\nalternations. Set it to a lower value if you want the\noptimisations to be as conservative of memory as possible but\nstill occur, and set it to a negative value to prevent the\noptimisation and conserve the most memory. Under normal\nsituations this variable should be of no interest to you.\n\n" }, \
{ "$RS", "IO::Handle->input_record_separator( EXPR )\n$INPUT_RECORD_SEPARATOR\n$RS\n$/\n The input record separator, newline by default. This influences\nPerl's idea of what a \"line\" is. Works like awk's RS variable,\nincluding treating empty lines as a terminator if set to the\nnull string (an empty line cannot contain any spaces or tabs).\nYou may set it to a multi-character string to match a\nmulti-character terminator, or to \"undef\" to read through the\nend of file. Setting it to \"\\n\\n\" means something slightly\ndifferent than setting to \"\", if the file contains consecutive\nempty lines. Setting to \"\" will treat two or more consecutive\nempty lines as a single empty line. Setting to \"\\n\\n\" will\nblindly assume that the next input character belongs to the next\nparagraph, even if it's a newline.\n\n" }, \
{ "$^S", "$EXCEPTIONS_BEING_CAUGHT\n$^S\nCurrent state of the interpreter.\n\n" }, \
{ "${^SAFE_LOCALES}", "${^SAFE_LOCALES}\nReflects if safe locale operations are available to this perl\n(when the value is 1) or not (the value is 0). This variable is\nalways 1 if the perl has been compiled without threads. It is\nalso 1 if this perl is using thread-safe locale operations. Note\nthat an individual thread may choose to use the global locale\n(generally unsafe) by calling \"switch_to_global_locale\" in\nperlapi. This variable currently is still set to 1 in such\nthreads.\n\n" }, \
{ "$SUBSCRIPT_SEPARATOR", "$SUBSCRIPT_SEPARATOR\n$SUBSEP\n$;\n The subscript separator for multidimensional array emulation. If\nyou refer to a hash element as\n\n" }, \
{ "$SUBSEP", "$SUBSCRIPT_SEPARATOR\n$SUBSEP\n$;\n The subscript separator for multidimensional array emulation. If\nyou refer to a hash element as\n\n" }, \
{ "$SYSTEM_FD_MAX", "$SYSTEM_FD_MAX\n$^F\nThe maximum system file descriptor, ordinarily 2. System file\ndescriptors are passed to \"exec()\"ed processes, while higher\nfile descriptors are not. Also, during an \"open()\", system file\ndescriptors are preserved even if the \"open()\" fails (ordinary\nfile descriptors are closed before the \"open()\" is attempted).\nThe close-on-exec status of a file descriptor will be decided\naccording to the value of $^F when the corresponding file, pipe,\nor socket was opened, not the time of the \"exec()\".\n\n" }, \
{ "$^T", "$BASETIME\n$^T\nThe time at which the program began running, in seconds since\nthe epoch (beginning of 1970). The values returned by the -M,\n-A, and -C filetests are based on this value.\n\n" }, \
{ "${^TAINT}", "${^TAINT}\nReflects if taint mode is on or off. 1 for on (the program was\nrun with -T), 0 for off, -1 when only taint warnings are enabled\n(i.e. with -t or -TU).\n\n" }, \
{ "$UID", "$REAL_USER_ID\n$UID\n$<\n The real uid of this process. You can change both the real uid\nand the effective uid at the same time by using\n\"POSIX::setuid()\". Since changes to $< require a system call,\ncheck $! after a change attempt to detect any possible errors.\n\n" }, \
{ "${^UNICODE}", "${^UNICODE}\nReflects certain Unicode settings of Perl. See perlrun\ndocumentation for the \"-C\" switch for more information about the\npossible values.\n\n" }, \
{ "${^UTF8CACHE}", "${^UTF8CACHE}\nThis variable controls the state of the internal UTF-8 offset\ncaching code. 1 for on (the default), 0 for off, -1 to debug the\ncaching code by checking all its results against linear scans,\nand panicking on any discrepancy.\n\n" }, \
{ "${^UTF8LOCALE}", "${^UTF8LOCALE}\nThis variable indicates whether a UTF-8 locale was detected by\nperl at startup. This information is used by perl when it's in\nadjust-utf8ness-to-locale mode (as when run with the \"-CL\"\ncommand-line switch); see perlrun for more info on this.\n\n" }, \
{ "$^V", "$PERL_VERSION\n$^V\nThe revision, version, and subversion of the Perl interpreter,\nrepresented as a version object.\n\n" }, \
{ "$^W", "$WARNING\n$^W\nThe current value of the warning switch, initially true if -w\nwas used, false otherwise, but directly modifiable.\n\n" }, \
{ "$WARNING", "$WARNING\n$^W\nThe current value of the warning switch, initially true if -w\nwas used, false otherwise, but directly modifiable.\n\n" }, \
{ "${^WARNING_BITS}", "${^WARNING_BITS}\nThe current set of warning checks enabled by the \"use warnings\"\npragma. It has the same scoping as the $^H and \"%^H\" variables.\nThe exact values are considered internal to the warnings pragma\nand may change between versions of Perl.\n\n" }, \
{ "${^WIN32_SLOPPY_STAT}", "${^WIN32_SLOPPY_STAT}\nIf this variable is set to a true value, then \"stat()\" on\nWindows will not try to open the file. This means that the link\ncount cannot be determined and file attributes may be out of\ndate if additional hardlinks to the file exist. On the other\nhand, not opening the file is considerably faster, especially\nfor files on network drives.\n\n" }, \
{ "$^X", "$EXECUTABLE_NAME\n$^X\nThe name used to execute the current copy of Perl, from C's\n\"argv[0]\" or (where supported) /proc/self/exe.\n\n" }, \
{ "@ARG", "@ARG\n@_\n Within a subroutine the array @_ contains the parameters passed\nto that subroutine. Inside a subroutine, @_ is the default array\nfor the array operators \"pop\" and \"shift\".\n\n" }, \
{ "@ARGV", "@ARGV   The array @ARGV contains the command-line arguments intended for\nthe script. $#ARGV is generally the number of arguments minus\none, because $ARGV[0] is the first argument, *not* the program's\ncommand name itself. See \"$0\" for the command name.\n\n" }, \
{ "ARGV", "ARGV\nThe special filehandle that iterates over command-line filenames\nin @ARGV. Usually written as the null filehandle in the angle\noperator \"<>\". Note that currently \"ARGV\" only has its magical\neffect within the \"<>\" operator; elsewhere it is just a plain\nfilehandle corresponding to the last file opened by \"<>\". In\nparticular, passing \"\\*ARGV\" as a parameter to a function that\nexpects a filehandle may not cause your function to\nautomatically read the contents of all the files in @ARGV.\n\n" }, \
{ "ARGVOUT", "ARGVOUT The special filehandle that points to the currently open output\nfile when doing edit-in-place processing with -i. Useful when\nyou have to do a lot of inserting and don't want to keep\nmodifying $_. See perlrun for the -i switch.\n\n" }, \
{ "%{^CAPTURE}", "%{^CAPTURE}\n%LAST_PAREN_MATCH\n%+\n Similar to \"@+\", the \"%+\" hash allows access to the named\ncapture buffers, should they exist, in the last successful match\nin the currently active dynamic scope.\n\n" }, \
{ "@{^CAPTURE}", "@{^CAPTURE}\nAn array which exposes the contents of the capture buffers, if\nany, of the last successful pattern match, not counting patterns\nmatched in nested blocks that have been exited already.\n\n" }, \
{ "%{^CAPTURE_ALL}", "%{^CAPTURE_ALL}\n\n" }, \
{ "CHECK", "CHECK\nExecution of any \"CHECK\" blocks.\n\n" }, \
{ "CONSTRUCT", "CONSTRUCT\nThe \"PerlInterpreter*\" is being constructed via\n\"perl_construct\". This value is mostly there for completeness\nand for use via the underlying C variable \"PL_phase\". It's not\nreally possible for Perl code to be executed unless construction\nof the interpreter is finished.\n\n" }, \
{ "DESTRUCT", "DESTRUCT\nGlobal destruction.\n\n" }, \
{ "END", "END\nExecution of any \"END\" blocks.\n\n" }, \
{ "%ENV", "%ENV\nThe hash %ENV contains your current environment. Setting a value\nin \"ENV\" changes the environment for any child processes you\nsubsequently \"fork()\" off.\n\n" }, \
{ "%ERRNO", "%OS_ERROR\n%ERRNO\n%!\n Each element of \"%!\" has a true value only if $! is set to that\nvalue. For example, $!{ENOENT} is true if and only if the\ncurrent value of $! is \"ENOENT\"; that is, if the most recent\nerror was \"No such file or directory\" (or its moral equivalent:\nnot all operating systems give that exact error, and certainly\nnot all languages). The specific true value is not guaranteed,\nbut in the past has generally been the numeric value of $!. To\ncheck if a particular key is meaningful on your system, use\n\"exists $!{the_key}\"; for a list of legal keys, use \"keys %!\".\nSee Errno for more information, and also see \"$!\".\n\n" }, \
{ "@F", "@F\n The array @F contains the fields of each line read in when\nautosplit mode is turned on. See perlrun for the -a switch. This\narray is package-specific, and must be declared or given a full\npackage name if not in package main when running under \"strict\n'vars'\".\n\n" }, \
{ "%^H", "%^H\nThe \"%^H\" hash provides the same scoping semantic as $^H. This\nmakes it useful for implementation of lexically scoped pragmas.\nSee perlpragma. All the entries are stringified when accessed at\nruntime, so only simple values can be accommodated. This means\nno pointers to objects, for example.\n\n" }, \
{ "%INC", "%INC\nThe hash %INC contains entries for each filename included via\nthe \"do\", \"require\", or \"use\" operators. The key is the filename\nyou specified (with module names converted to pathnames), and\nthe value is the location of the file found. The \"require\"\noperator uses this hash to determine whether a particular file\nhas already been included.\n\n" }, \
{ "@INC", "@INC\nThe array @INC contains the list of places that the \"do EXPR\",\n\"require\", or \"use\" constructs look for their library files. It\ninitially consists of the arguments to any -I command-line\nswitches, followed by the default Perl library, probably\n/usr/local/lib/perl, followed by \".\", to represent the current\ndirectory. (\".\" will not be appended if taint checks are\nenabled, either by \"-T\" or by \"-t\", or if configured not to do\nso by the \"-Ddefault_inc_excludes_dot\" compile time option.) If\nyou need to modify this at runtime, you should use the \"use lib\"\npragma to get the machine-dependent library properly loaded\nalso:\n\n" }, \
{ "INIT", "INIT\nSimilar to \"CHECK\", but for \"INIT\"-blocks, not \"CHECK\" blocks.\n\n" }, \
{ "@ISA", "@ISA\nEach package contains a special array called @ISA which contains\na list of that class's parent classes, if any. This array is\nsimply a list of scalars, each of which is a string that\ncorresponds to a package name. The array is examined when Perl\ndoes method resolution, which is covered in perlobj.\n\n" }, \
{ "@LAST_MATCH_END", "@LAST_MATCH_END\n@+\n This array holds the offsets of the ends of the last successful\nsubmatches in the currently active dynamic scope. $+[0] is the\noffset into the string of the end of the entire match. This is\nthe same value as what the \"pos\" function returns when called on\nthe variable that was matched against. The *n*th element of this\narray holds the offset of the *n*th submatch, so $+[1] is the\noffset past where $1 ends, $+[2] the offset past where $2 ends,\nand so on. You can use $#+ to determine how many subgroups were\nin the last successful match. See the examples given for the\n\"@-\" variable.\n\n" }, \
{ "@LAST_MATCH_START", "@LAST_MATCH_START\n@-\n $-[0] is the offset of the start of the last successful match.\n\"$-[\"*n*\"]\" is the offset of the start of the substring matched\nby *n*-th subpattern, or undef if the subpattern did not match.\n\n" }, \
{ "%LAST_PAREN_MATCH", "%{^CAPTURE}\n%LAST_PAREN_MATCH\n%+\n Similar to \"@+\", the \"%+\" hash allows access to the named\ncapture buffers, should they exist, in the last successful match\nin the currently active dynamic scope.\n\n" }, \
{ "%OS_ERROR", "%OS_ERROR\n%ERRNO\n%!\n Each element of \"%!\" has a true value only if $! is set to that\nvalue. For example, $!{ENOENT} is true if and only if the\ncurrent value of $! is \"ENOENT\"; that is, if the most recent\nerror was \"No such file or directory\" (or its moral equivalent:\nnot all operating systems give that exact error, and certainly\nnot all languages). The specific true value is not guaranteed,\nbut in the past has generally been the numeric value of $!. To\ncheck if a particular key is meaningful on your system, use\n\"exists $!{the_key}\"; for a list of legal keys, use \"keys %!\".\nSee Errno for more information, and also see \"$!\".\n\n" }, \
{ "RUN", "RUN\nThe main run-time, i.e. the execution of \"PL_main_root\".\n\n" }, \
{ "%SIG", "%SIG\nThe hash %SIG contains signal handlers for signals. For example:\n\n" }, \
{ "START", "START\nThis is the global compile-time. That includes, basically, every\n\"BEGIN\" block executed directly or indirectly from during the\ncompile-time of the top-level program.\n\n" }, \
};
/* @} */
